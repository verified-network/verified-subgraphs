// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class distributeFees extends ethereum.Event {
  get params(): distributeFees__Params {
    return new distributeFees__Params(this);
  }
}

export class distributeFees__Params {
  _event: distributeFees;

  constructor(event: distributeFees) {
    this._event = event;
  }

  get issuingFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get underwritingFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get prorataLiquidityProvided(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class marketmakers extends ethereum.Event {
  get params(): marketmakers__Params {
    return new marketmakers__Params(this);
  }
}

export class marketmakers__Params {
  _event: marketmakers;

  constructor(event: marketmakers) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platform(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get provider(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get currency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenOffered(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get underwritten(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get earnings(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class minPrice extends ethereum.Event {
  get params(): minPrice__Params {
    return new minPrice__Params(this);
  }
}

export class minPrice__Params {
  _event: minPrice;

  constructor(event: minPrice) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class offers extends ethereum.Event {
  get params(): offers__Params {
    return new offers__Params(this);
  }
}

export class offers__Params {
  _event: offers;

  constructor(event: offers) {
    this._event = event;
  }

  get platform(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get party(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get offered(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountOffered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isin(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get minimumOrderSize(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get offeringDocs(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class rejectInvestor extends ethereum.Event {
  get params(): rejectInvestor__Params {
    return new rejectInvestor__Params(this);
  }
}

export class rejectInvestor__Params {
  _event: rejectInvestor;

  constructor(event: rejectInvestor) {
    this._event = event;
  }

  get security(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cash(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class subscribers extends ethereum.Event {
  get params(): subscribers__Params {
    return new subscribers__Params(this);
  }
}

export class subscribers__Params {
  _event: subscribers;

  constructor(event: subscribers) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platform(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get investor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get currency(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get cashSwapped(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get securitySwapped(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PrimaryIssueManager__getOfferedResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get offered(): Address {
    return this[1].toAddress();
  }

  get amountOffered(): BigInt {
    return this[2].toBigInt();
  }

  get amountDesired(): BigInt {
    return this[3].toBigInt();
  }

  get min(): BigInt {
    return this[4].toBigInt();
  }

  get isin(): Bytes {
    return this[5].toBytes();
  }

  get minimumOrderSize(): BigInt {
    return this[6].toBigInt();
  }

  get offeringdocs(): string {
    return this[7].toString();
  }
}

export class PrimaryIssueManager__getOfferMadeResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get offered(): Address {
    return this[1].toAddress();
  }

  get amountOffered(): BigInt {
    return this[2].toBigInt();
  }

  get amountDesired(): BigInt {
    return this[3].toBigInt();
  }

  get min(): BigInt {
    return this[4].toBigInt();
  }

  get isin(): Bytes {
    return this[5].toBytes();
  }

  get minimumOrderSize(): BigInt {
    return this[6].toBigInt();
  }

  get offeringdocs(): string {
    return this[7].toString();
  }
}

export class PrimaryIssueManager__getLiquidityProvidersResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get tokenOffered(): Address {
    return this[1].toAddress();
  }

  get underwritten(): BigInt {
    return this[2].toBigInt();
  }

  get subscribed(): BigInt {
    return this[3].toBigInt();
  }

  get earned(): BigInt {
    return this[4].toBigInt();
  }
}

export class PrimaryIssueManager__getSubscribersResultValue0Struct extends ethereum.Tuple {
  get investor(): Address {
    return this[0].toAddress();
  }

  get asset(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get traded(): BigInt {
    return this[4].toBigInt();
  }
}

export class PrimaryIssueManager__closeResult {
  value0: Array<Bytes>;
  value1: boolean;

  constructor(value0: Array<Bytes>, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class PrimaryIssueManager extends ethereum.SmartContract {
  static bind(address: Address): PrimaryIssueManager {
    return new PrimaryIssueManager("PrimaryIssueManager", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOffered(
    offered: Address
  ): Array<PrimaryIssueManager__getOfferedResultValue0Struct> {
    let result = super.call(
      "getOffered",
      "getOffered(address):((address,address,uint256,uint256,uint256,bytes32,uint256,string)[])",
      [ethereum.Value.fromAddress(offered)]
    );

    return result[0].toTupleArray<
      PrimaryIssueManager__getOfferedResultValue0Struct
    >();
  }

  try_getOffered(
    offered: Address
  ): ethereum.CallResult<
    Array<PrimaryIssueManager__getOfferedResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOffered",
      "getOffered(address):((address,address,uint256,uint256,uint256,bytes32,uint256,string)[])",
      [ethereum.Value.fromAddress(offered)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PrimaryIssueManager__getOfferedResultValue0Struct>()
    );
  }

  getOfferMade(
    _owned: Address,
    _tomatch: Address
  ): Array<PrimaryIssueManager__getOfferMadeResultValue0Struct> {
    let result = super.call(
      "getOfferMade",
      "getOfferMade(address,address):((address,address,uint256,uint256,uint256,bytes32,uint256,string)[])",
      [ethereum.Value.fromAddress(_owned), ethereum.Value.fromAddress(_tomatch)]
    );

    return result[0].toTupleArray<
      PrimaryIssueManager__getOfferMadeResultValue0Struct
    >();
  }

  try_getOfferMade(
    _owned: Address,
    _tomatch: Address
  ): ethereum.CallResult<
    Array<PrimaryIssueManager__getOfferMadeResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOfferMade",
      "getOfferMade(address,address):((address,address,uint256,uint256,uint256,bytes32,uint256,string)[])",
      [ethereum.Value.fromAddress(_owned), ethereum.Value.fromAddress(_tomatch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PrimaryIssueManager__getOfferMadeResultValue0Struct
      >()
    );
  }

  getLiquidityProviders(
    _security: Address
  ): Array<PrimaryIssueManager__getLiquidityProvidersResultValue0Struct> {
    let result = super.call(
      "getLiquidityProviders",
      "getLiquidityProviders(address):((address,address,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(_security)]
    );

    return result[0].toTupleArray<
      PrimaryIssueManager__getLiquidityProvidersResultValue0Struct
    >();
  }

  try_getLiquidityProviders(
    _security: Address
  ): ethereum.CallResult<
    Array<PrimaryIssueManager__getLiquidityProvidersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getLiquidityProviders",
      "getLiquidityProviders(address):((address,address,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(_security)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PrimaryIssueManager__getLiquidityProvidersResultValue0Struct
      >()
    );
  }

  getAllotedStake(_token: Address): BigInt {
    let result = super.call(
      "getAllotedStake",
      "getAllotedStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getAllotedStake(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllotedStake",
      "getAllotedStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubscribers(
    poolId: Bytes
  ): Array<PrimaryIssueManager__getSubscribersResultValue0Struct> {
    let result = super.call(
      "getSubscribers",
      "getSubscribers(bytes32):((address,address,string,uint256,uint256)[])",
      [ethereum.Value.fromFixedBytes(poolId)]
    );

    return result[0].toTupleArray<
      PrimaryIssueManager__getSubscribersResultValue0Struct
    >();
  }

  try_getSubscribers(
    poolId: Bytes
  ): ethereum.CallResult<
    Array<PrimaryIssueManager__getSubscribersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSubscribers",
      "getSubscribers(bytes32):((address,address,string,uint256,uint256)[])",
      [ethereum.Value.fromFixedBytes(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PrimaryIssueManager__getSubscribersResultValue0Struct
      >()
    );
  }

  close(security: Address, redeem: boolean): PrimaryIssueManager__closeResult {
    let result = super.call("close", "close(address,bool):(bytes32[],bool)", [
      ethereum.Value.fromAddress(security),
      ethereum.Value.fromBoolean(redeem)
    ]);

    return new PrimaryIssueManager__closeResult(
      result[0].toBytesArray(),
      result[1].toBoolean()
    );
  }

  try_close(
    security: Address,
    redeem: boolean
  ): ethereum.CallResult<PrimaryIssueManager__closeResult> {
    let result = super.tryCall(
      "close",
      "close(address,bool):(bytes32[],bool)",
      [ethereum.Value.fromAddress(security), ethereum.Value.fromBoolean(redeem)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryIssueManager__closeResult(
        value[0].toBytesArray(),
        value[1].toBoolean()
      )
    );
  }

  getIssuingFeeCollected(_token: Address): BigInt {
    let result = super.call(
      "getIssuingFeeCollected",
      "getIssuingFeeCollected(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getIssuingFeeCollected(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIssuingFeeCollected",
      "getIssuingFeeCollected(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _swapFeePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _products(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _liquidity(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _client(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _bridge(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _distribution(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetSignerCall extends ethereum.Call {
  get inputs(): SetSignerCall__Inputs {
    return new SetSignerCall__Inputs(this);
  }

  get outputs(): SetSignerCall__Outputs {
    return new SetSignerCall__Outputs(this);
  }
}

export class SetSignerCall__Inputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }

  get _signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSignerCall__Outputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }
}

export class OfferCall extends ethereum.Call {
  get inputs(): OfferCall__Inputs {
    return new OfferCall__Inputs(this);
  }

  get outputs(): OfferCall__Outputs {
    return new OfferCall__Outputs(this);
  }
}

export class OfferCall__Inputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }

  get owned(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isin(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get offered(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tomatch(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get desired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get min(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get docs(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class OfferCall__Outputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }
}

export class SetOfferTermsCall extends ethereum.Call {
  get inputs(): SetOfferTermsCall__Inputs {
    return new SetOfferTermsCall__Inputs(this);
  }

  get outputs(): SetOfferTermsCall__Outputs {
    return new SetOfferTermsCall__Outputs(this);
  }
}

export class SetOfferTermsCall__Inputs {
  _call: SetOfferTermsCall;

  constructor(call: SetOfferTermsCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owned(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tomatch(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minOrderSize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetOfferTermsCall__Outputs {
  _call: SetOfferTermsCall;

  constructor(call: SetOfferTermsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get security(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cutoffTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get issuer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get security(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get asset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get cAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get investor(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get sAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get paidIn(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get security(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeem(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get value0(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }

  get value1(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class AcceptCall extends ethereum.Call {
  get inputs(): AcceptCall__Inputs {
    return new AcceptCall__Inputs(this);
  }

  get outputs(): AcceptCall__Outputs {
    return new AcceptCall__Outputs(this);
  }
}

export class AcceptCall__Inputs {
  _call: AcceptCall;

  constructor(call: AcceptCall) {
    this._call = call;
  }

  get poolid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get investor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amnt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get asset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AcceptCall__Outputs {
  _call: AcceptCall;

  constructor(call: AcceptCall) {
    this._call = call;
  }
}

export class RejectCall extends ethereum.Call {
  get inputs(): RejectCall__Inputs {
    return new RejectCall__Inputs(this);
  }

  get outputs(): RejectCall__Outputs {
    return new RejectCall__Outputs(this);
  }
}

export class RejectCall__Inputs {
  _call: RejectCall;

  constructor(call: RejectCall) {
    this._call = call;
  }

  get poolid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get investor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RejectCall__Outputs {
  _call: RejectCall;

  constructor(call: RejectCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }
}

export class GetIssuingFeeCollectedCall extends ethereum.Call {
  get inputs(): GetIssuingFeeCollectedCall__Inputs {
    return new GetIssuingFeeCollectedCall__Inputs(this);
  }

  get outputs(): GetIssuingFeeCollectedCall__Outputs {
    return new GetIssuingFeeCollectedCall__Outputs(this);
  }
}

export class GetIssuingFeeCollectedCall__Inputs {
  _call: GetIssuingFeeCollectedCall;

  constructor(call: GetIssuingFeeCollectedCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetIssuingFeeCollectedCall__Outputs {
  _call: GetIssuingFeeCollectedCall;

  constructor(call: GetIssuingFeeCollectedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

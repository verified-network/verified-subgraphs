// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get client(): Bytes | null {
    let value = this.get("client");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set client(value: Bytes | null) {
    if (!value) {
      this.unset("client");
    } else {
      this.set("client", Value.fromBytes(<Bytes>value));
    }
  }

  get name(): Bytes | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromBytes(<Bytes>value));
    }
  }

  get accountid(): Bytes | null {
    let value = this.get("accountid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountid(value: Bytes | null) {
    if (!value) {
      this.unset("accountid");
    } else {
      this.set("accountid", Value.fromBytes(<Bytes>value));
    }
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get cashIssues(): CashIssuesLoader {
    return new CashIssuesLoader(
      "User",
      this.get("id")!.toString(),
      "cashIssues",
    );
  }

  get cashDeposits(): CashDepositedLoader {
    return new CashDepositedLoader(
      "User",
      this.get("id")!.toString(),
      "cashDeposits",
    );
  }

  get cashRedemptions(): CashRedemptionsLoader {
    return new CashRedemptionsLoader(
      "User",
      this.get("id")!.toString(),
      "cashRedemptions",
    );
  }

  get cashTransfers(): CashTransfersLoader {
    return new CashTransfersLoader(
      "User",
      this.get("id")!.toString(),
      "cashTransfers",
    );
  }

  get bondIssues(): BondIssuesLoader {
    return new BondIssuesLoader(
      "User",
      this.get("id")!.toString(),
      "bondIssues",
    );
  }

  get bondPurchases(): BondPurchasesLoader {
    return new BondPurchasesLoader(
      "User",
      this.get("id")!.toString(),
      "bondPurchases",
    );
  }

  get bondRedemptions(): BondRedemptionsLoader {
    return new BondRedemptionsLoader(
      "User",
      this.get("id")!.toString(),
      "bondRedemptions",
    );
  }

  get BondLiquidations(): BondLiquidationsLoader {
    return new BondLiquidationsLoader(
      "User",
      this.get("id")!.toString(),
      "BondLiquidations",
    );
  }

  get offers(): OffersLoader {
    return new OffersLoader("User", this.get("id")!.toString(), "offers");
  }

  get securitySeller(): TradesLoader {
    return new TradesLoader(
      "User",
      this.get("id")!.toString(),
      "securitySeller",
    );
  }

  get securityBuyer(): TradesLoader {
    return new TradesLoader(
      "User",
      this.get("id")!.toString(),
      "securityBuyer",
    );
  }

  get primarySubscribers(): SubscribersLoader {
    return new SubscribersLoader(
      "User",
      this.get("id")!.toString(),
      "primarySubscribers",
    );
  }

  get secondaryIssuers(): InvestorsLoader {
    return new InvestorsLoader(
      "User",
      this.get("id")!.toString(),
      "secondaryIssuers",
    );
  }

  get secondaryInvestors(): InvestorsLoader {
    return new InvestorsLoader(
      "User",
      this.get("id")!.toString(),
      "secondaryInvestors",
    );
  }

  get tradeTransferor(): TradersLoader {
    return new TradersLoader(
      "User",
      this.get("id")!.toString(),
      "tradeTransferor",
    );
  }

  get tradeTransferee(): TradersLoader {
    return new TradersLoader(
      "User",
      this.get("id")!.toString(),
      "tradeTransferee",
    );
  }

  get liquidityProviders(): LiquidityProvidersLoader {
    return new LiquidityProvidersLoader(
      "User",
      this.get("id")!.toString(),
      "liquidityProviders",
    );
  }

  get allotedTo(): AllotmentsLoader {
    return new AllotmentsLoader(
      "User",
      this.get("id")!.toString(),
      "allotedTo",
    );
  }

  get refundedTo(): RefundsLoader {
    return new RefundsLoader("User", this.get("id")!.toString(), "refundedTo");
  }

  get liquidityProviderSettled(): SettlementsLoader {
    return new SettlementsLoader(
      "User",
      this.get("id")!.toString(),
      "liquidityProviderSettled",
    );
  }

  get issuerSettled(): SettlementsLoader {
    return new SettlementsLoader(
      "User",
      this.get("id")!.toString(),
      "issuerSettled",
    );
  }

  get manager(): Array<string> | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set manager(value: Array<string> | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromStringArray(<Array<string>>value));
    }
  }

  get submanager(): ManagerLoader {
    return new ManagerLoader("User", this.get("id")!.toString(), "submanager");
  }

  get shareholder(): RevenueSharesLoader {
    return new RevenueSharesLoader(
      "User",
      this.get("id")!.toString(),
      "shareholder",
    );
  }

  get liquidityRequestor(): LiquidityTokenRequestsLoader {
    return new LiquidityTokenRequestsLoader(
      "User",
      this.get("id")!.toString(),
      "liquidityRequestor",
    );
  }

  get liquidityIssuedTo(): LiquidityTokenIssuesLoader {
    return new LiquidityTokenIssuesLoader(
      "User",
      this.get("id")!.toString(),
      "liquidityIssuedTo",
    );
  }

  get liquidityProvidedTo(): LiquidityOnPlatformLoader {
    return new LiquidityOnPlatformLoader(
      "User",
      this.get("id")!.toString(),
      "liquidityProvidedTo",
    );
  }

  get earnedByManager(): ManagerRoILoader {
    return new ManagerRoILoader(
      "User",
      this.get("id")!.toString(),
      "earnedByManager",
    );
  }

  get earnedByInvestor(): InvestorRoILoader {
    return new InvestorRoILoader(
      "User",
      this.get("id")!.toString(),
      "earnedByInvestor",
    );
  }

  get issuer(): SecurityLoader {
    return new SecurityLoader("User", this.get("id")!.toString(), "issuer");
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenName(): Bytes | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenName(value: Bytes | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenType(): Bytes | null {
    let value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenType(value: Bytes | null) {
    if (!value) {
      this.unset("tokenType");
    } else {
      this.set("tokenType", Value.fromBytes(<Bytes>value));
    }
  }

  get bondIssues(): BondIssuesLoader {
    return new BondIssuesLoader(
      "Token",
      this.get("id")!.toString(),
      "bondIssues",
    );
  }

  get bondPurchases(): BondPurchasesLoader {
    return new BondPurchasesLoader(
      "Token",
      this.get("id")!.toString(),
      "bondPurchases",
    );
  }

  get bondRedemptions(): BondRedemptionsLoader {
    return new BondRedemptionsLoader(
      "Token",
      this.get("id")!.toString(),
      "bondRedemptions",
    );
  }

  get bondLiquidations(): BondLiquidationsLoader {
    return new BondLiquidationsLoader(
      "Token",
      this.get("id")!.toString(),
      "bondLiquidations",
    );
  }
}

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Platform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Platform must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Platform", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Platform | null {
    return changetype<Platform | null>(store.get_in_block("Platform", id));
  }

  static load(id: string): Platform | null {
    return changetype<Platform | null>(store.get("Platform", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get name(): Bytes {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes) {
    this.set("name", Value.fromBytes(value));
  }

  get feeCollections(): FeeCollectionsLoader {
    return new FeeCollectionsLoader(
      "Platform",
      this.get("id")!.toString(),
      "feeCollections",
    );
  }

  get investorReturns(): InvestorRoILoader {
    return new InvestorRoILoader(
      "Platform",
      this.get("id")!.toString(),
      "investorReturns",
    );
  }

  get managerReturns(): ManagerRoILoader {
    return new ManagerRoILoader(
      "Platform",
      this.get("id")!.toString(),
      "managerReturns",
    );
  }

  get platformReturns(): PlatformRoILoader {
    return new PlatformRoILoader(
      "Platform",
      this.get("id")!.toString(),
      "platformReturns",
    );
  }

  get platformLiquidity(): LiquidityOnPlatformLoader {
    return new LiquidityOnPlatformLoader(
      "Platform",
      this.get("id")!.toString(),
      "platformLiquidity",
    );
  }
}

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Currency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Currency | null {
    return changetype<Currency | null>(store.get_in_block("Currency", id));
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get cashIssues(): CashIssuesLoader {
    return new CashIssuesLoader(
      "Currency",
      this.get("id")!.toString(),
      "cashIssues",
    );
  }

  get cashDeposits(): CashDepositedLoader {
    return new CashDepositedLoader(
      "Currency",
      this.get("id")!.toString(),
      "cashDeposits",
    );
  }

  get cashRedemptions(): CashRedemptionsLoader {
    return new CashRedemptionsLoader(
      "Currency",
      this.get("id")!.toString(),
      "cashRedemptions",
    );
  }

  get cashTransfers(): CashTransfersLoader {
    return new CashTransfersLoader(
      "Currency",
      this.get("id")!.toString(),
      "cashTransfers",
    );
  }

  get liquidityTokenRequests(): LiquidityTokenRequestsLoader {
    return new LiquidityTokenRequestsLoader(
      "Currency",
      this.get("id")!.toString(),
      "liquidityTokenRequests",
    );
  }

  get liquidityTokenIssues(): LiquidityTokenIssuesLoader {
    return new LiquidityTokenIssuesLoader(
      "Currency",
      this.get("id")!.toString(),
      "liquidityTokenIssues",
    );
  }

  get liquidityOnPlatform(): LiquidityOnPlatformLoader {
    return new LiquidityOnPlatformLoader(
      "Currency",
      this.get("id")!.toString(),
      "liquidityOnPlatform",
    );
  }

  get liquidityEarningsByManager(): ManagerRoILoader {
    return new ManagerRoILoader(
      "Currency",
      this.get("id")!.toString(),
      "liquidityEarningsByManager",
    );
  }
}

export class Security extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Security entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Security must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Security", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Security | null {
    return changetype<Security | null>(store.get_in_block("Security", id));
  }

  static load(id: string): Security | null {
    return changetype<Security | null>(store.get("Security", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): Bytes {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set security(value: Bytes) {
    this.set("security", Value.fromBytes(value));
  }

  get productCategory(): Bytes {
    let value = this.get("productCategory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set productCategory(value: Bytes) {
    this.set("productCategory", Value.fromBytes(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get isin(): Bytes {
    let value = this.get("isin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get restricted(): boolean {
    let value = this.get("restricted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set restricted(value: boolean) {
    this.set("restricted", Value.fromBoolean(value));
  }

  get issueManager(): Bytes {
    let value = this.get("issueManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set issueManager(value: Bytes) {
    this.set("issueManager", Value.fromBytes(value));
  }

  get restrictions(): Array<Bytes> | null {
    let value = this.get("restrictions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set restrictions(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("restrictions");
    } else {
      this.set("restrictions", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get primarySubscribers(): SubscribersLoader {
    return new SubscribersLoader(
      "Security",
      this.get("id")!.toString(),
      "primarySubscribers",
    );
  }

  get secondaryInvestors(): InvestorsLoader {
    return new InvestorsLoader(
      "Security",
      this.get("id")!.toString(),
      "secondaryInvestors",
    );
  }

  get marginTraders(): TradersLoader {
    return new TradersLoader(
      "Security",
      this.get("id")!.toString(),
      "marginTraders",
    );
  }

  get trades(): TradesLoader {
    return new TradesLoader("Security", this.get("id")!.toString(), "trades");
  }

  get liquidityProviders(): LiquidityProvidersLoader {
    return new LiquidityProvidersLoader(
      "Security",
      this.get("id")!.toString(),
      "liquidityProviders",
    );
  }

  get liquidityOffered(): OffersLoader {
    return new OffersLoader(
      "Security",
      this.get("id")!.toString(),
      "liquidityOffered",
    );
  }

  get subscriptionsClosed(): ClosuresLoader {
    return new ClosuresLoader(
      "Security",
      this.get("id")!.toString(),
      "subscriptionsClosed",
    );
  }

  get primaryAllotments(): AllotmentsLoader {
    return new AllotmentsLoader(
      "Security",
      this.get("id")!.toString(),
      "primaryAllotments",
    );
  }

  get primaryRefunds(): RefundsLoader {
    return new RefundsLoader(
      "Security",
      this.get("id")!.toString(),
      "primaryRefunds",
    );
  }

  get primarySettlements(): SettlementsLoader {
    return new SettlementsLoader(
      "Security",
      this.get("id")!.toString(),
      "primarySettlements",
    );
  }

  get resolutions(): ResolutionsLoader {
    return new ResolutionsLoader(
      "Security",
      this.get("id")!.toString(),
      "resolutions",
    );
  }

  get snapshots(): SnapshotsLoader {
    return new SnapshotsLoader(
      "Security",
      this.get("id")!.toString(),
      "snapshots",
    );
  }
}

export class CashDeposited extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashDeposited entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashDeposited must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashDeposited", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashDeposited | null {
    return changetype<CashDeposited | null>(
      store.get_in_block("CashDeposited", id),
    );
  }

  static load(id: string): CashDeposited | null {
    return changetype<CashDeposited | null>(store.get("CashDeposited", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashIssues must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashIssues", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashIssues | null {
    return changetype<CashIssues | null>(store.get_in_block("CashIssues", id));
  }

  static load(id: string): CashIssues | null {
    return changetype<CashIssues | null>(store.get("CashIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class CashRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashRedemptions must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashRedemptions", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashRedemptions | null {
    return changetype<CashRedemptions | null>(
      store.get_in_block("CashRedemptions", id),
    );
  }

  static load(id: string): CashRedemptions | null {
    return changetype<CashRedemptions | null>(store.get("CashRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string | null {
    let value = this.get("party");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set party(value: string | null) {
    if (!value) {
      this.unset("party");
    } else {
      this.set("party", Value.fromString(<string>value));
    }
  }

  get currency(): string {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get redeemedFor(): BigDecimal {
    let value = this.get("redeemedFor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set redeemedFor(value: BigDecimal) {
    this.set("redeemedFor", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class CashTransfers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashTransfers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CashTransfers must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CashTransfers", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CashTransfers | null {
    return changetype<CashTransfers | null>(
      store.get_in_block("CashTransfers", id),
    );
  }

  static load(id: string): CashTransfers | null {
    return changetype<CashTransfers | null>(store.get("CashTransfers", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferor(): string {
    let value = this.get("transferor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transferor(value: string) {
    this.set("transferor", Value.fromString(value));
  }

  get transferee(): string {
    let value = this.get("transferee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transferee(value: string) {
    this.set("transferee", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get deposit(): BigDecimal {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set deposit(value: BigDecimal) {
    this.set("deposit", Value.fromBigDecimal(value));
  }
}

export class BondIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondIssues must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BondIssues", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondIssues | null {
    return changetype<BondIssues | null>(store.get_in_block("BondIssues", id));
  }

  static load(id: string): BondIssues | null {
    return changetype<BondIssues | null>(store.get("BondIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get issuedAmount(): BigDecimal {
    let value = this.get("issuedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set issuedAmount(value: BigDecimal) {
    this.set("issuedAmount", Value.fromBigDecimal(value));
  }

  get collateralCurrency(): Bytes {
    let value = this.get("collateralCurrency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralCurrency(value: Bytes) {
    this.set("collateralCurrency", Value.fromBytes(value));
  }

  get collateralAmount(): BigDecimal {
    let value = this.get("collateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAmount(value: BigDecimal) {
    this.set("collateralAmount", Value.fromBigDecimal(value));
  }

  get issueTime(): i32 {
    let value = this.get("issueTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set issueTime(value: i32) {
    this.set("issueTime", Value.fromI32(value));
  }
}

export class BondPurchases extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondPurchases entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondPurchases must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BondPurchases", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondPurchases | null {
    return changetype<BondPurchases | null>(
      store.get_in_block("BondPurchases", id),
    );
  }

  static load(id: string): BondPurchases | null {
    return changetype<BondPurchases | null>(store.get("BondPurchases", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchaser(): string {
    let value = this.get("purchaser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set purchaser(value: string) {
    this.set("purchaser", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get purchaseValue(): BigDecimal {
    let value = this.get("purchaseValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set purchaseValue(value: BigDecimal) {
    this.set("purchaseValue", Value.fromBigDecimal(value));
  }

  get paidInCurrency(): Bytes {
    let value = this.get("paidInCurrency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paidInCurrency(value: Bytes) {
    this.set("paidInCurrency", Value.fromBytes(value));
  }

  get purchasedAmount(): BigDecimal {
    let value = this.get("purchasedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set purchasedAmount(value: BigDecimal) {
    this.set("purchasedAmount", Value.fromBigDecimal(value));
  }

  get purchaseTime(): i32 {
    let value = this.get("purchaseTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set purchaseTime(value: i32) {
    this.set("purchaseTime", Value.fromI32(value));
  }
}

export class BondRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondRedemptions must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BondRedemptions", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondRedemptions | null {
    return changetype<BondRedemptions | null>(
      store.get_in_block("BondRedemptions", id),
    );
  }

  static load(id: string): BondRedemptions | null {
    return changetype<BondRedemptions | null>(store.get("BondRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): string {
    let value = this.get("redeemer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redeemer(value: string) {
    this.set("redeemer", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get redeemedValue(): BigDecimal {
    let value = this.get("redeemedValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set redeemedValue(value: BigDecimal) {
    this.set("redeemedValue", Value.fromBigDecimal(value));
  }

  get redemptionCurrency(): Bytes {
    let value = this.get("redemptionCurrency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set redemptionCurrency(value: Bytes) {
    this.set("redemptionCurrency", Value.fromBytes(value));
  }

  get redemptionAmount(): BigDecimal {
    let value = this.get("redemptionAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set redemptionAmount(value: BigDecimal) {
    this.set("redemptionAmount", Value.fromBigDecimal(value));
  }
}

export class BondLiquidations extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondLiquidations entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondLiquidations must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BondLiquidations", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BondLiquidations | null {
    return changetype<BondLiquidations | null>(
      store.get_in_block("BondLiquidations", id),
    );
  }

  static load(id: string): BondLiquidations | null {
    return changetype<BondLiquidations | null>(
      store.get("BondLiquidations", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get liquidatedValue(): BigDecimal {
    let value = this.get("liquidatedValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidatedValue(value: BigDecimal) {
    this.set("liquidatedValue", Value.fromBigDecimal(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get liquidationCurrency(): Bytes {
    let value = this.get("liquidationCurrency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidationCurrency(value: Bytes) {
    this.set("liquidationCurrency", Value.fromBytes(value));
  }

  get liquidatedAmount(): BigDecimal {
    let value = this.get("liquidatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidatedAmount(value: BigDecimal) {
    this.set("liquidatedAmount", Value.fromBigDecimal(value));
  }
}

export class Manager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Manager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Manager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Manager", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Manager | null {
    return changetype<Manager | null>(store.get_in_block("Manager", id));
  }

  static load(id: string): Manager | null {
    return changetype<Manager | null>(store.get("Manager", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get submanager(): string | null {
    let value = this.get("submanager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submanager(value: string | null) {
    if (!value) {
      this.unset("submanager");
    } else {
      this.set("submanager", Value.fromString(<string>value));
    }
  }

  get role(): Bytes {
    let value = this.get("role");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get managerId(): Bytes | null {
    let value = this.get("managerId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set managerId(value: Bytes | null) {
    if (!value) {
      this.unset("managerId");
    } else {
      this.set("managerId", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Offers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offers must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Offers", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Offers | null {
    return changetype<Offers | null>(store.get_in_block("Offers", id));
  }

  static load(id: string): Offers | null {
    return changetype<Offers | null>(store.get("Offers", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offeredBy(): string | null {
    let value = this.get("offeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offeredBy(value: string | null) {
    if (!value) {
      this.unset("offeredBy");
    } else {
      this.set("offeredBy", Value.fromString(<string>value));
    }
  }

  get offered(): Bytes {
    let value = this.get("offered");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offered(value: Bytes) {
    this.set("offered", Value.fromBytes(value));
  }

  get tomatch(): string {
    let value = this.get("tomatch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tomatch(value: string) {
    this.set("tomatch", Value.fromString(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get desired(): BigDecimal {
    let value = this.get("desired");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set desired(value: BigDecimal) {
    this.set("desired", Value.fromBigDecimal(value));
  }

  get minimum(): BigDecimal {
    let value = this.get("minimum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set minimum(value: BigDecimal) {
    this.set("minimum", Value.fromBigDecimal(value));
  }

  get orderSize(): BigInt {
    let value = this.get("orderSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderSize(value: BigInt) {
    this.set("orderSize", Value.fromBigInt(value));
  }

  get offeringDocs(): string {
    let value = this.get("offeringDocs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set offeringDocs(value: string) {
    this.set("offeringDocs", Value.fromString(value));
  }
}

export class Trades extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trades entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trades must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Trades", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Trades | null {
    return changetype<Trades | null>(store.get_in_block("Trades", id));
  }

  static load(id: string): Trades | null {
    return changetype<Trades | null>(store.get("Trades", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get transferor(): string | null {
    let value = this.get("transferor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferor(value: string | null) {
    if (!value) {
      this.unset("transferor");
    } else {
      this.set("transferor", Value.fromString(<string>value));
    }
  }

  get transferee(): string | null {
    let value = this.get("transferee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferee(value: string | null) {
    if (!value) {
      this.unset("transferee");
    } else {
      this.set("transferee", Value.fromString(<string>value));
    }
  }

  get unitsToTransfer(): BigInt {
    let value = this.get("unitsToTransfer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unitsToTransfer(value: BigInt) {
    this.set("unitsToTransfer", Value.fromBigInt(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get price(): BigDecimal | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementStatus(): Bytes | null {
    let value = this.get("settlementStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set settlementStatus(value: Bytes | null) {
    if (!value) {
      this.unset("settlementStatus");
    } else {
      this.set("settlementStatus", Value.fromBytes(<Bytes>value));
    }
  }

  get amountPaid(): BigDecimal | null {
    let value = this.get("amountPaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountPaid(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountPaid");
    } else {
      this.set("amountPaid", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get orderRef(): Bytes | null {
    let value = this.get("orderRef");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set orderRef(value: Bytes | null) {
    if (!value) {
      this.unset("orderRef");
    } else {
      this.set("orderRef", Value.fromBytes(<Bytes>value));
    }
  }

  get tradingCommission(): BigDecimal {
    let value = this.get("tradingCommission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tradingCommission(value: BigDecimal) {
    this.set("tradingCommission", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Subscribers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Subscribers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Subscribers must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Subscribers", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Subscribers | null {
    return changetype<Subscribers | null>(
      store.get_in_block("Subscribers", id),
    );
  }

  static load(id: string): Subscribers | null {
    return changetype<Subscribers | null>(store.get("Subscribers", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get cashSwapped(): BigDecimal {
    let value = this.get("cashSwapped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cashSwapped(value: BigDecimal) {
    this.set("cashSwapped", Value.fromBigDecimal(value));
  }

  get securitySwapped(): BigDecimal {
    let value = this.get("securitySwapped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set securitySwapped(value: BigDecimal) {
    this.set("securitySwapped", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get bought(): boolean {
    let value = this.get("bought");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set bought(value: boolean) {
    this.set("bought", Value.fromBoolean(value));
  }
}

export class Investors extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Investors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Investors must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Investors", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Investors | null {
    return changetype<Investors | null>(store.get_in_block("Investors", id));
  }

  static load(id: string): Investors | null {
    return changetype<Investors | null>(store.get("Investors", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get DPID(): Bytes {
    let value = this.get("DPID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set DPID(value: Bytes) {
    this.set("DPID", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Traders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Traders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Traders must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Traders", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Traders | null {
    return changetype<Traders | null>(store.get_in_block("Traders", id));
  }

  static load(id: string): Traders | null {
    return changetype<Traders | null>(store.get("Traders", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferor(): string | null {
    let value = this.get("transferor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferor(value: string | null) {
    if (!value) {
      this.unset("transferor");
    } else {
      this.set("transferor", Value.fromString(<string>value));
    }
  }

  get transferee(): string | null {
    let value = this.get("transferee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferee(value: string | null) {
    if (!value) {
      this.unset("transferee");
    } else {
      this.set("transferee", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securityTraded(): BigDecimal {
    let value = this.get("securityTraded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set securityTraded(value: BigDecimal) {
    this.set("securityTraded", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get cashTraded(): BigDecimal {
    let value = this.get("cashTraded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cashTraded(value: BigDecimal) {
    this.set("cashTraded", Value.fromBigDecimal(value));
  }

  get orderRef(): Bytes {
    let value = this.get("orderRef");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set orderRef(value: Bytes) {
    this.set("orderRef", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidityProviders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityProviders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityProviders must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidityProviders", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidityProviders | null {
    return changetype<LiquidityProviders | null>(
      store.get_in_block("LiquidityProviders", id),
    );
  }

  static load(id: string): LiquidityProviders | null {
    return changetype<LiquidityProviders | null>(
      store.get("LiquidityProviders", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get tokenOffered(): BigDecimal {
    let value = this.get("tokenOffered");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenOffered(value: BigDecimal) {
    this.set("tokenOffered", Value.fromBigDecimal(value));
  }

  get underwritten(): BigDecimal | null {
    let value = this.get("underwritten");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set underwritten(value: BigDecimal | null) {
    if (!value) {
      this.unset("underwritten");
    } else {
      this.set("underwritten", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get earned(): BigDecimal | null {
    let value = this.get("earned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set earned(value: BigDecimal | null) {
    if (!value) {
      this.unset("earned");
    } else {
      this.set("earned", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Closures extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Closures entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Closures must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Closures", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Closures | null {
    return changetype<Closures | null>(store.get_in_block("Closures", id));
  }

  static load(id: string): Closures | null {
    return changetype<Closures | null>(store.get("Closures", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Allotments extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Allotments entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Allotments must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Allotments", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Allotments | null {
    return changetype<Allotments | null>(store.get_in_block("Allotments", id));
  }

  static load(id: string): Allotments | null {
    return changetype<Allotments | null>(store.get("Allotments", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get allotedAmount(): BigDecimal {
    let value = this.get("allotedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set allotedAmount(value: BigDecimal) {
    this.set("allotedAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Refunds extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refunds entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Refunds must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Refunds", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Refunds | null {
    return changetype<Refunds | null>(store.get_in_block("Refunds", id));
  }

  static load(id: string): Refunds | null {
    return changetype<Refunds | null>(store.get("Refunds", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get refundAmount(): BigDecimal {
    let value = this.get("refundAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set refundAmount(value: BigDecimal) {
    this.set("refundAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Settlements extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Settlements entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Settlements must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Settlements", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Settlements | null {
    return changetype<Settlements | null>(
      store.get_in_block("Settlements", id),
    );
  }

  static load(id: string): Settlements | null {
    return changetype<Settlements | null>(store.get("Settlements", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get liquidityProvider(): string | null {
    let value = this.get("liquidityProvider");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityProvider(value: string | null) {
    if (!value) {
      this.unset("liquidityProvider");
    } else {
      this.set("liquidityProvider", Value.fromString(<string>value));
    }
  }

  get underwritingFee(): BigDecimal {
    let value = this.get("underwritingFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set underwritingFee(value: BigDecimal) {
    this.set("underwritingFee", Value.fromBigDecimal(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get subscription(): BigDecimal {
    let value = this.get("subscription");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set subscription(value: BigDecimal) {
    this.set("subscription", Value.fromBigDecimal(value));
  }
}

export class MarginCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarginCollateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarginCollateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarginCollateral | null {
    return changetype<MarginCollateral | null>(
      store.get_in_block("MarginCollateral", id),
    );
  }

  static load(id: string): MarginCollateral | null {
    return changetype<MarginCollateral | null>(
      store.get("MarginCollateral", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get action(): Bytes {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action(value: Bytes) {
    this.set("action", Value.fromBytes(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get time(): i32 {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set time(value: i32) {
    this.set("time", Value.fromI32(value));
  }
}

export class MarginTradePnL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginTradePnL entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarginTradePnL must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarginTradePnL", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarginTradePnL | null {
    return changetype<MarginTradePnL | null>(
      store.get_in_block("MarginTradePnL", id),
    );
  }

  static load(id: string): MarginTradePnL | null {
    return changetype<MarginTradePnL | null>(store.get("MarginTradePnL", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get financing(): BigDecimal {
    let value = this.get("financing");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set financing(value: BigDecimal) {
    this.set("financing", Value.fromBigDecimal(value));
  }

  get dividend(): BigDecimal {
    let value = this.get("dividend");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dividend(value: BigDecimal) {
    this.set("dividend", Value.fromBigDecimal(value));
  }

  get commission(): BigDecimal {
    let value = this.get("commission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set commission(value: BigDecimal) {
    this.set("commission", Value.fromBigDecimal(value));
  }

  get settlementTime(): i32 {
    let value = this.get("settlementTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set settlementTime(value: i32) {
    this.set("settlementTime", Value.fromI32(value));
  }
}

export class Snapshots extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Snapshots entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Snapshots must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Snapshots", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Snapshots | null {
    return changetype<Snapshots | null>(store.get_in_block("Snapshots", id));
  }

  static load(id: string): Snapshots | null {
    return changetype<Snapshots | null>(store.get("Snapshots", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get oldTime(): i32 {
    let value = this.get("oldTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set oldTime(value: i32) {
    this.set("oldTime", Value.fromI32(value));
  }

  get newTime(): i32 {
    let value = this.get("newTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newTime(value: i32) {
    this.set("newTime", Value.fromI32(value));
  }
}

export class Resolutions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolutions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resolutions must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Resolutions", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Resolutions | null {
    return changetype<Resolutions | null>(
      store.get_in_block("Resolutions", id),
    );
  }

  static load(id: string): Resolutions | null {
    return changetype<Resolutions | null>(store.get("Resolutions", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get recordDate(): i32 {
    let value = this.get("recordDate");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set recordDate(value: i32) {
    this.set("recordDate", Value.fromI32(value));
  }

  get resolution(): string {
    let value = this.get("resolution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolution(value: string) {
    this.set("resolution", Value.fromString(value));
  }

  get voting(): boolean {
    let value = this.get("voting");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set voting(value: boolean) {
    this.set("voting", Value.fromBoolean(value));
  }
}

export class RevenueShares extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RevenueShares entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RevenueShares must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RevenueShares", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RevenueShares | null {
    return changetype<RevenueShares | null>(
      store.get_in_block("RevenueShares", id),
    );
  }

  static load(id: string): RevenueShares | null {
    return changetype<RevenueShares | null>(store.get("RevenueShares", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shareholder(): string {
    let value = this.get("shareholder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set shareholder(value: string) {
    this.set("shareholder", Value.fromString(value));
  }

  get shareholderType(): Bytes {
    let value = this.get("shareholderType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set shareholderType(value: Bytes) {
    this.set("shareholderType", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidityTokenRequests extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidityTokenRequests entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityTokenRequests must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidityTokenRequests", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidityTokenRequests | null {
    return changetype<LiquidityTokenRequests | null>(
      store.get_in_block("LiquidityTokenRequests", id),
    );
  }

  static load(id: string): LiquidityTokenRequests | null {
    return changetype<LiquidityTokenRequests | null>(
      store.get("LiquidityTokenRequests", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidityTokenIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityTokenIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityTokenIssues must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidityTokenIssues", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidityTokenIssues | null {
    return changetype<LiquidityTokenIssues | null>(
      store.get_in_block("LiquidityTokenIssues", id),
    );
  }

  static load(id: string): LiquidityTokenIssues | null {
    return changetype<LiquidityTokenIssues | null>(
      store.get("LiquidityTokenIssues", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get LPToIssue(): BigDecimal {
    let value = this.get("LPToIssue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set LPToIssue(value: BigDecimal) {
    this.set("LPToIssue", Value.fromBigDecimal(value));
  }
}

export class LiquidityOnPlatform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityOnPlatform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityOnPlatform must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LiquidityOnPlatform", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LiquidityOnPlatform | null {
    return changetype<LiquidityOnPlatform | null>(
      store.get_in_block("LiquidityOnPlatform", id),
    );
  }

  static load(id: string): LiquidityOnPlatform | null {
    return changetype<LiquidityOnPlatform | null>(
      store.get("LiquidityOnPlatform", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get LPToken(): BigDecimal {
    let value = this.get("LPToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set LPToken(value: BigDecimal) {
    this.set("LPToken", Value.fromBigDecimal(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }
}

export class ManagerRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagerRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagerRoI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ManagerRoI", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ManagerRoI | null {
    return changetype<ManagerRoI | null>(store.get_in_block("ManagerRoI", id));
  }

  static load(id: string): ManagerRoI | null {
    return changetype<ManagerRoI | null>(store.get("ManagerRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get distribution(): BigDecimal {
    let value = this.get("distribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set distribution(value: BigDecimal) {
    this.set("distribution", Value.fromBigDecimal(value));
  }
}

export class PlatformRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlatformRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlatformRoI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PlatformRoI", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PlatformRoI | null {
    return changetype<PlatformRoI | null>(
      store.get_in_block("PlatformRoI", id),
    );
  }

  static load(id: string): PlatformRoI | null {
    return changetype<PlatformRoI | null>(store.get("PlatformRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get vitta(): Bytes {
    let value = this.get("vitta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vitta(value: Bytes) {
    this.set("vitta", Value.fromBytes(value));
  }

  get distribution(): BigDecimal {
    let value = this.get("distribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set distribution(value: BigDecimal) {
    this.set("distribution", Value.fromBigDecimal(value));
  }
}

export class InvestorRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestorRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InvestorRoI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InvestorRoI", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InvestorRoI | null {
    return changetype<InvestorRoI | null>(
      store.get_in_block("InvestorRoI", id),
    );
  }

  static load(id: string): InvestorRoI | null {
    return changetype<InvestorRoI | null>(store.get("InvestorRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get vitta(): Bytes {
    let value = this.get("vitta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vitta(value: Bytes) {
    this.set("vitta", Value.fromBytes(value));
  }

  get prorataStake(): BigDecimal {
    let value = this.get("prorataStake");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set prorataStake(value: BigDecimal) {
    this.set("prorataStake", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class FeeCollections extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeCollections entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeCollections must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FeeCollections", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FeeCollections | null {
    return changetype<FeeCollections | null>(
      store.get_in_block("FeeCollections", id),
    );
  }

  static load(id: string): FeeCollections | null {
    return changetype<FeeCollections | null>(store.get("FeeCollections", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get feeCollected(): BigDecimal | null {
    let value = this.get("feeCollected");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeCollected(value: BigDecimal | null) {
    if (!value) {
      this.unset("feeCollected");
    } else {
      this.set("feeCollected", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ManagersOnPlatform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagersOnPlatform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagersOnPlatform must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ManagersOnPlatform", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ManagersOnPlatform | null {
    return changetype<ManagersOnPlatform | null>(
      store.get_in_block("ManagersOnPlatform", id),
    );
  }

  static load(id: string): ManagersOnPlatform | null {
    return changetype<ManagersOnPlatform | null>(
      store.get("ManagersOnPlatform", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }
}

export class RWA extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RWA entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RWA must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RWA", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RWA | null {
    return changetype<RWA | null>(store.get_in_block("RWA", id));
  }

  static load(id: string): RWA | null {
    return changetype<RWA | null>(store.get("RWA", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get bond(): string {
    let value = this.get("bond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bond(value: string) {
    this.set("bond", Value.fromString(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get issuingDocs(): string {
    let value = this.get("issuingDocs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set issuingDocs(value: string) {
    this.set("issuingDocs", Value.fromString(value));
  }

  get faceValue(): BigDecimal {
    let value = this.get("faceValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set faceValue(value: BigDecimal) {
    this.set("faceValue", Value.fromBigDecimal(value));
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get_in_block("Collateral", id));
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get("Collateral", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CollaterizedLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollaterizedLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollaterizedLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollaterizedLoan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollaterizedLoan | null {
    return changetype<CollaterizedLoan | null>(
      store.get_in_block("CollaterizedLoan", id),
    );
  }

  static load(id: string): CollaterizedLoan | null {
    return changetype<CollaterizedLoan | null>(
      store.get("CollaterizedLoan", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get base(): Bytes {
    let value = this.get("base");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set base(value: Bytes) {
    this.set("base", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CollaterizedLoanRepayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollaterizedLoanRepayment entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollaterizedLoanRepayment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollaterizedLoanRepayment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollaterizedLoanRepayment | null {
    return changetype<CollaterizedLoanRepayment | null>(
      store.get_in_block("CollaterizedLoanRepayment", id),
    );
  }

  static load(id: string): CollaterizedLoanRepayment | null {
    return changetype<CollaterizedLoanRepayment | null>(
      store.get("CollaterizedLoanRepayment", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get base(): Bytes {
    let value = this.get("base");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set base(value: Bytes) {
    this.set("base", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashIssuesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CashIssues[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CashIssues[]>(value);
  }
}

export class CashDepositedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CashDeposited[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CashDeposited[]>(value);
  }
}

export class CashRedemptionsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CashRedemptions[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CashRedemptions[]>(value);
  }
}

export class CashTransfersLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CashTransfers[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CashTransfers[]>(value);
  }
}

export class BondIssuesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BondIssues[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BondIssues[]>(value);
  }
}

export class BondPurchasesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BondPurchases[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BondPurchases[]>(value);
  }
}

export class BondRedemptionsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BondRedemptions[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BondRedemptions[]>(value);
  }
}

export class BondLiquidationsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BondLiquidations[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BondLiquidations[]>(value);
  }
}

export class OffersLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Offers[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Offers[]>(value);
  }
}

export class TradesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Trades[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Trades[]>(value);
  }
}

export class SubscribersLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Subscribers[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Subscribers[]>(value);
  }
}

export class InvestorsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Investors[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Investors[]>(value);
  }
}

export class TradersLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Traders[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Traders[]>(value);
  }
}

export class LiquidityProvidersLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidityProviders[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidityProviders[]>(value);
  }
}

export class AllotmentsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Allotments[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Allotments[]>(value);
  }
}

export class RefundsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Refunds[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Refunds[]>(value);
  }
}

export class SettlementsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Settlements[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Settlements[]>(value);
  }
}

export class ManagerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Manager[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Manager[]>(value);
  }
}

export class RevenueSharesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RevenueShares[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RevenueShares[]>(value);
  }
}

export class LiquidityTokenRequestsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidityTokenRequests[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidityTokenRequests[]>(value);
  }
}

export class LiquidityTokenIssuesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidityTokenIssues[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidityTokenIssues[]>(value);
  }
}

export class LiquidityOnPlatformLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LiquidityOnPlatform[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LiquidityOnPlatform[]>(value);
  }
}

export class ManagerRoILoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ManagerRoI[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ManagerRoI[]>(value);
  }
}

export class InvestorRoILoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): InvestorRoI[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<InvestorRoI[]>(value);
  }
}

export class SecurityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Security[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Security[]>(value);
  }
}

export class FeeCollectionsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FeeCollections[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FeeCollections[]>(value);
  }
}

export class PlatformRoILoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PlatformRoI[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PlatformRoI[]>(value);
  }
}

export class ClosuresLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Closures[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Closures[]>(value);
  }
}

export class ResolutionsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Resolutions[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Resolutions[]>(value);
  }
}

export class SnapshotsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Snapshots[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Snapshots[]>(value);
  }
}

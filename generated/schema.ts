// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Currency entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): Bytes | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromBytes(<Bytes>value));
    }
  }

  get cashIssues(): Array<string> | null {
    let value = this.get("cashIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("cashIssues");
    } else {
      this.set("cashIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashDeposits(): Array<string> | null {
    let value = this.get("cashDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashDeposits(value: Array<string> | null) {
    if (!value) {
      this.unset("cashDeposits");
    } else {
      this.set("cashDeposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashRedemptions(): Array<string> | null {
    let value = this.get("cashRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("cashRedemptions");
    } else {
      this.set("cashRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashTransfers(): Array<string> | null {
    let value = this.get("cashTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("cashTransfers");
    } else {
      this.set("cashTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssues(): Array<string> | null {
    let value = this.get("bondIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssues");
    } else {
      this.set("bondIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondPurchases(): Array<string> | null {
    let value = this.get("bondPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondPurchases(value: Array<string> | null) {
    if (!value) {
      this.unset("bondPurchases");
    } else {
      this.set("bondPurchases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondRedemptions(): Array<string> | null {
    let value = this.get("bondRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("bondRedemptions");
    } else {
      this.set("bondRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssueRequests(): Array<string> | null {
    let value = this.get("bondIssueRequests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssueRequests(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssueRequests");
    } else {
      this.set(
        "bondIssueRequests",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("status", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get client(): Bytes | null {
    let value = this.get("client");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set client(value: Bytes | null) {
    if (!value) {
      this.unset("client");
    } else {
      this.set("client", Value.fromBytes(<Bytes>value));
    }
  }

  get name(): Bytes | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromBytes(<Bytes>value));
    }
  }

  get surname(): Bytes | null {
    let value = this.get("surname");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set surname(value: Bytes | null) {
    if (!value) {
      this.unset("surname");
    } else {
      this.set("surname", Value.fromBytes(<Bytes>value));
    }
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get cashIssues(): Array<string> | null {
    let value = this.get("cashIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("cashIssues");
    } else {
      this.set("cashIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashDeposits(): Array<string> | null {
    let value = this.get("cashDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashDeposits(value: Array<string> | null) {
    if (!value) {
      this.unset("cashDeposits");
    } else {
      this.set("cashDeposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashRedemptions(): Array<string> | null {
    let value = this.get("cashRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("cashRedemptions");
    } else {
      this.set("cashRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashTransfers(): Array<string> | null {
    let value = this.get("cashTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("cashTransfers");
    } else {
      this.set("cashTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssues(): Array<string> | null {
    let value = this.get("bondIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssues");
    } else {
      this.set("bondIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondPurchases(): Array<string> | null {
    let value = this.get("bondPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondPurchases(value: Array<string> | null) {
    if (!value) {
      this.unset("bondPurchases");
    } else {
      this.set("bondPurchases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondRedemptions(): Array<string> | null {
    let value = this.get("bondRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("bondRedemptions");
    } else {
      this.set("bondRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssueRequests(): Array<string> | null {
    let value = this.get("bondIssueRequests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssueRequests(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssueRequests");
    } else {
      this.set(
        "bondIssueRequests",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get manager(): Array<string> | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set manager(value: Array<string> | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromStringArray(<Array<string>>value));
    }
  }

  get submanager(): Array<string> | null {
    let value = this.get("submanager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set submanager(value: Array<string> | null) {
    if (!value) {
      this.unset("submanager");
    } else {
      this.set("submanager", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenName(): Bytes | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenName(value: Bytes | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenType(): Bytes | null {
    let value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenType(value: Bytes | null) {
    if (!value) {
      this.unset("tokenType");
    } else {
      this.set("tokenType", Value.fromBytes(<Bytes>value));
    }
  }

  get bondIssues(): Array<string> {
    let value = this.get("bondIssues");
    return value!.toStringArray();
  }

  set bondIssues(value: Array<string>) {
    this.set("bondIssues", Value.fromStringArray(value));
  }

  get bondPurchases(): Array<string> {
    let value = this.get("bondPurchases");
    return value!.toStringArray();
  }

  set bondPurchases(value: Array<string>) {
    this.set("bondPurchases", Value.fromStringArray(value));
  }

  get bondRedemptions(): Array<string> {
    let value = this.get("bondRedemptions");
    return value!.toStringArray();
  }

  set bondRedemptions(value: Array<string>) {
    this.set("bondRedemptions", Value.fromStringArray(value));
  }
}

export class Security extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromBytes(Bytes.empty()));
    this.set("issuer", Value.fromBytes(Bytes.empty()));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("restricted", Value.fromBoolean(false));
    this.set("issueManager", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Security entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Security entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Security", id.toString(), this);
    }
  }

  static load(id: string): Security | null {
    return changetype<Security | null>(store.get("Security", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): Bytes {
    let value = this.get("security");
    return value!.toBytes();
  }

  set security(value: Bytes) {
    this.set("security", Value.fromBytes(value));
  }

  get issuer(): Bytes {
    let value = this.get("issuer");
    return value!.toBytes();
  }

  set issuer(value: Bytes) {
    this.set("issuer", Value.fromBytes(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get restricted(): boolean {
    let value = this.get("restricted");
    return value!.toBoolean();
  }

  set restricted(value: boolean) {
    this.set("restricted", Value.fromBoolean(value));
  }

  get issueManager(): Bytes {
    let value = this.get("issueManager");
    return value!.toBytes();
  }

  set issueManager(value: Bytes) {
    this.set("issueManager", Value.fromBytes(value));
  }

  get primarySubscribers(): Array<string> | null {
    let value = this.get("primarySubscribers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySubscribers(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySubscribers");
    } else {
      this.set(
        "primarySubscribers",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get secondaryInvestors(): Array<string> | null {
    let value = this.get("secondaryInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set secondaryInvestors(value: Array<string> | null) {
    if (!value) {
      this.unset("secondaryInvestors");
    } else {
      this.set(
        "secondaryInvestors",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquidityProviders(): Array<string> | null {
    let value = this.get("liquidityProviders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityProviders(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityProviders");
    } else {
      this.set(
        "liquidityProviders",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityOffered(): Array<string> | null {
    let value = this.get("liquidityOffered");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityOffered(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityOffered");
    } else {
      this.set("liquidityOffered", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subscriptionsClosed(): Array<string> | null {
    let value = this.get("subscriptionsClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subscriptionsClosed(value: Array<string> | null) {
    if (!value) {
      this.unset("subscriptionsClosed");
    } else {
      this.set(
        "subscriptionsClosed",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get primaryAllotments(): Array<string> | null {
    let value = this.get("primaryAllotments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primaryAllotments(value: Array<string> | null) {
    if (!value) {
      this.unset("primaryAllotments");
    } else {
      this.set(
        "primaryAllotments",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get primaryRefunds(): Array<string> | null {
    let value = this.get("primaryRefunds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primaryRefunds(value: Array<string> | null) {
    if (!value) {
      this.unset("primaryRefunds");
    } else {
      this.set("primaryRefunds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get primarySettlements(): Array<string> | null {
    let value = this.get("primarySettlements");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySettlements(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySettlements");
    } else {
      this.set(
        "primarySettlements",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get resolutions(): Array<string> | null {
    let value = this.get("resolutions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set resolutions(value: Array<string> | null) {
    if (!value) {
      this.unset("resolutions");
    } else {
      this.set("resolutions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get snapshots(): Array<string> | null {
    let value = this.get("snapshots");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set snapshots(value: Array<string> | null) {
    if (!value) {
      this.unset("snapshots");
    } else {
      this.set("snapshots", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CashDeposited extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashDeposited entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashDeposited entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashDeposited", id.toString(), this);
    }
  }

  static load(id: string): CashDeposited | null {
    return changetype<CashDeposited | null>(store.get("CashDeposited", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashIssues", id.toString(), this);
    }
  }

  static load(id: string): CashIssues | null {
    return changetype<CashIssues | null>(store.get("CashIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashRedemptions", id.toString(), this);
    }
  }

  static load(id: string): CashRedemptions | null {
    return changetype<CashRedemptions | null>(store.get("CashRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashTransfers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferor", Value.fromString(""));
    this.set("transferee", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashTransfers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashTransfers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashTransfers", id.toString(), this);
    }
  }

  static load(id: string): CashTransfers | null {
    return changetype<CashTransfers | null>(store.get("CashTransfers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferor(): string {
    let value = this.get("transferor");
    return value!.toString();
  }

  set transferor(value: string) {
    this.set("transferor", Value.fromString(value));
  }

  get transferee(): string {
    let value = this.get("transferee");
    return value!.toString();
  }

  set transferee(value: string) {
    this.set("transferee", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class BondIssueRequests extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("issuer", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssueRequests entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondIssueRequests entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondIssueRequests", id.toString(), this);
    }
  }

  static load(id: string): BondIssueRequests | null {
    return changetype<BondIssueRequests | null>(
      store.get("BondIssueRequests", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value!.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class BondIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("issuer", Value.fromString(""));
    this.set("collateralCurrency", Value.fromString(""));
    this.set("issuedAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondIssues", id.toString(), this);
    }
  }

  static load(id: string): BondIssues | null {
    return changetype<BondIssues | null>(store.get("BondIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value!.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get collateralCurrency(): string {
    let value = this.get("collateralCurrency");
    return value!.toString();
  }

  set collateralCurrency(value: string) {
    this.set("collateralCurrency", Value.fromString(value));
  }

  get issuedAmount(): BigDecimal {
    let value = this.get("issuedAmount");
    return value!.toBigDecimal();
  }

  set issuedAmount(value: BigDecimal) {
    this.set("issuedAmount", Value.fromBigDecimal(value));
  }
}

export class BondPurchases extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("purchaser", Value.fromString(""));
    this.set("paidInCurrency", Value.fromString(""));
    this.set("purchasedAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondPurchases entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondPurchases entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondPurchases", id.toString(), this);
    }
  }

  static load(id: string): BondPurchases | null {
    return changetype<BondPurchases | null>(store.get("BondPurchases", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get purchaser(): string {
    let value = this.get("purchaser");
    return value!.toString();
  }

  set purchaser(value: string) {
    this.set("purchaser", Value.fromString(value));
  }

  get paidInCurrency(): string {
    let value = this.get("paidInCurrency");
    return value!.toString();
  }

  set paidInCurrency(value: string) {
    this.set("paidInCurrency", Value.fromString(value));
  }

  get purchasedAmount(): BigDecimal {
    let value = this.get("purchasedAmount");
    return value!.toBigDecimal();
  }

  set purchasedAmount(value: BigDecimal) {
    this.set("purchasedAmount", Value.fromBigDecimal(value));
  }
}

export class BondRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("redeemer", Value.fromString(""));
    this.set("redemptionCurrency", Value.fromString(""));
    this.set("redemptionAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondRedemptions", id.toString(), this);
    }
  }

  static load(id: string): BondRedemptions | null {
    return changetype<BondRedemptions | null>(store.get("BondRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get redeemer(): string {
    let value = this.get("redeemer");
    return value!.toString();
  }

  set redeemer(value: string) {
    this.set("redeemer", Value.fromString(value));
  }

  get redemptionCurrency(): string {
    let value = this.get("redemptionCurrency");
    return value!.toString();
  }

  set redemptionCurrency(value: string) {
    this.set("redemptionCurrency", Value.fromString(value));
  }

  get redemptionAmount(): BigDecimal {
    let value = this.get("redemptionAmount");
    return value!.toBigDecimal();
  }

  set redemptionAmount(value: BigDecimal) {
    this.set("redemptionAmount", Value.fromBigDecimal(value));
  }
}

export class Manager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("submanager", Value.fromString(""));
    this.set("role", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Manager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Manager entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Manager", id.toString(), this);
    }
  }

  static load(id: string): Manager | null {
    return changetype<Manager | null>(store.get("Manager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get submanager(): string {
    let value = this.get("submanager");
    return value!.toString();
  }

  set submanager(value: string) {
    this.set("submanager", Value.fromString(value));
  }

  get role(): Bytes {
    let value = this.get("role");
    return value!.toBytes();
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get managerId(): Bytes | null {
    let value = this.get("managerId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set managerId(value: Bytes | null) {
    if (!value) {
      this.unset("managerId");
    } else {
      this.set("managerId", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Offers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("offeredBy", Value.fromBytes(Bytes.empty()));
    this.set("offered", Value.fromBytes(Bytes.empty()));
    this.set("tomatch", Value.fromString(""));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("desired", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minimum", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("orderSize", Value.fromBigInt(BigInt.zero()));
    this.set("offeringDocs", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Offers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Offers", id.toString(), this);
    }
  }

  static load(id: string): Offers | null {
    return changetype<Offers | null>(store.get("Offers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offeredBy(): Bytes {
    let value = this.get("offeredBy");
    return value!.toBytes();
  }

  set offeredBy(value: Bytes) {
    this.set("offeredBy", Value.fromBytes(value));
  }

  get offered(): Bytes {
    let value = this.get("offered");
    return value!.toBytes();
  }

  set offered(value: Bytes) {
    this.set("offered", Value.fromBytes(value));
  }

  get tomatch(): string {
    let value = this.get("tomatch");
    return value!.toString();
  }

  set tomatch(value: string) {
    this.set("tomatch", Value.fromString(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get desired(): BigDecimal {
    let value = this.get("desired");
    return value!.toBigDecimal();
  }

  set desired(value: BigDecimal) {
    this.set("desired", Value.fromBigDecimal(value));
  }

  get minimum(): BigDecimal {
    let value = this.get("minimum");
    return value!.toBigDecimal();
  }

  set minimum(value: BigDecimal) {
    this.set("minimum", Value.fromBigDecimal(value));
  }

  get orderSize(): BigInt {
    let value = this.get("orderSize");
    return value!.toBigInt();
  }

  set orderSize(value: BigInt) {
    this.set("orderSize", Value.fromBigInt(value));
  }

  get offeringDocs(): string {
    let value = this.get("offeringDocs");
    return value!.toString();
  }

  set offeringDocs(value: string) {
    this.set("offeringDocs", Value.fromString(value));
  }
}

export class Trades extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("transferor", Value.fromBytes(Bytes.empty()));
    this.set("transferee", Value.fromBytes(Bytes.empty()));
    this.set("unitsToTransfer", Value.fromBigInt(BigInt.zero()));
    this.set("security", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("settlementStatus", Value.fromBytes(Bytes.empty()));
    this.set("tradeRef", Value.fromBytes(Bytes.empty()));
    this.set("tradingCommission", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trades entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trades entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trades", id.toString(), this);
    }
  }

  static load(id: string): Trades | null {
    return changetype<Trades | null>(store.get("Trades", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get transferor(): Bytes {
    let value = this.get("transferor");
    return value!.toBytes();
  }

  set transferor(value: Bytes) {
    this.set("transferor", Value.fromBytes(value));
  }

  get transferee(): Bytes {
    let value = this.get("transferee");
    return value!.toBytes();
  }

  set transferee(value: Bytes) {
    this.set("transferee", Value.fromBytes(value));
  }

  get unitsToTransfer(): BigInt {
    let value = this.get("unitsToTransfer");
    return value!.toBigInt();
  }

  set unitsToTransfer(value: BigInt) {
    this.set("unitsToTransfer", Value.fromBigInt(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementStatus(): Bytes {
    let value = this.get("settlementStatus");
    return value!.toBytes();
  }

  set settlementStatus(value: Bytes) {
    this.set("settlementStatus", Value.fromBytes(value));
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    return value!.toBytes();
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get tradingCommission(): BigDecimal {
    let value = this.get("tradingCommission");
    return value!.toBigDecimal();
  }

  set tradingCommission(value: BigDecimal) {
    this.set("tradingCommission", Value.fromBigDecimal(value));
  }
}

export class Subscribers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("pool", Value.fromBytes(Bytes.empty()));
    this.set("investor", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("cashSwapped", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("securitySwapped", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
    this.set("bought", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Subscribers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Subscribers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Subscribers", id.toString(), this);
    }
  }

  static load(id: string): Subscribers | null {
    return changetype<Subscribers | null>(store.get("Subscribers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get investor(): Bytes {
    let value = this.get("investor");
    return value!.toBytes();
  }

  set investor(value: Bytes) {
    this.set("investor", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get cashSwapped(): BigDecimal {
    let value = this.get("cashSwapped");
    return value!.toBigDecimal();
  }

  set cashSwapped(value: BigDecimal) {
    this.set("cashSwapped", Value.fromBigDecimal(value));
  }

  get securitySwapped(): BigDecimal {
    let value = this.get("securitySwapped");
    return value!.toBigDecimal();
  }

  set securitySwapped(value: BigDecimal) {
    this.set("securitySwapped", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get bought(): boolean {
    let value = this.get("bought");
    return value!.toBoolean();
  }

  set bought(value: boolean) {
    this.set("bought", Value.fromBoolean(value));
  }
}

export class Investors extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("issuer", Value.fromBytes(Bytes.empty()));
    this.set("investor", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tradeRef", Value.fromBytes(Bytes.empty()));
    this.set("DPID", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Investors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Investors entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Investors", id.toString(), this);
    }
  }

  static load(id: string): Investors | null {
    return changetype<Investors | null>(store.get("Investors", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get issuer(): Bytes {
    let value = this.get("issuer");
    return value!.toBytes();
  }

  set issuer(value: Bytes) {
    this.set("issuer", Value.fromBytes(value));
  }

  get investor(): Bytes {
    let value = this.get("investor");
    return value!.toBytes();
  }

  set investor(value: Bytes) {
    this.set("investor", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    return value!.toBytes();
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get DPID(): Bytes {
    let value = this.get("DPID");
    return value!.toBytes();
  }

  set DPID(value: Bytes) {
    this.set("DPID", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidityProviders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("tokenOffered", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityProviders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityProviders entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityProviders", id.toString(), this);
    }
  }

  static load(id: string): LiquidityProviders | null {
    return changetype<LiquidityProviders | null>(
      store.get("LiquidityProviders", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    return value!.toBytes();
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get tokenOffered(): BigDecimal {
    let value = this.get("tokenOffered");
    return value!.toBigDecimal();
  }

  set tokenOffered(value: BigDecimal) {
    this.set("tokenOffered", Value.fromBigDecimal(value));
  }

  get underwritten(): BigDecimal | null {
    let value = this.get("underwritten");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set underwritten(value: BigDecimal | null) {
    if (!value) {
      this.unset("underwritten");
    } else {
      this.set("underwritten", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get earned(): BigDecimal | null {
    let value = this.get("earned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set earned(value: BigDecimal | null) {
    if (!value) {
      this.unset("earned");
    } else {
      this.set("earned", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Closures extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Closures entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Closures entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Closures", id.toString(), this);
    }
  }

  static load(id: string): Closures | null {
    return changetype<Closures | null>(store.get("Closures", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Allotments extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("investor", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("securitySubscribed", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("allotedAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Allotments entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Allotments entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Allotments", id.toString(), this);
    }
  }

  static load(id: string): Allotments | null {
    return changetype<Allotments | null>(store.get("Allotments", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): Bytes {
    let value = this.get("investor");
    return value!.toBytes();
  }

  set investor(value: Bytes) {
    this.set("investor", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    return value!.toBigDecimal();
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get allotedAmount(): BigDecimal {
    let value = this.get("allotedAmount");
    return value!.toBigDecimal();
  }

  set allotedAmount(value: BigDecimal) {
    this.set("allotedAmount", Value.fromBigDecimal(value));
  }
}

export class Refunds extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("investor", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("securitySubscribed", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("refundAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refunds entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Refunds entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Refunds", id.toString(), this);
    }
  }

  static load(id: string): Refunds | null {
    return changetype<Refunds | null>(store.get("Refunds", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): Bytes {
    let value = this.get("investor");
    return value!.toBytes();
  }

  set investor(value: Bytes) {
    this.set("investor", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    return value!.toBigDecimal();
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get refundAmount(): BigDecimal {
    let value = this.get("refundAmount");
    return value!.toBigDecimal();
  }

  set refundAmount(value: BigDecimal) {
    this.set("refundAmount", Value.fromBigDecimal(value));
  }
}

export class Settlements extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("liquidityProvider", Value.fromBytes(Bytes.empty()));
    this.set("underwritingFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("issuer", Value.fromBytes(Bytes.empty()));
    this.set("subscription", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Settlements entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Settlements entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Settlements", id.toString(), this);
    }
  }

  static load(id: string): Settlements | null {
    return changetype<Settlements | null>(store.get("Settlements", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get liquidityProvider(): Bytes {
    let value = this.get("liquidityProvider");
    return value!.toBytes();
  }

  set liquidityProvider(value: Bytes) {
    this.set("liquidityProvider", Value.fromBytes(value));
  }

  get underwritingFee(): BigDecimal {
    let value = this.get("underwritingFee");
    return value!.toBigDecimal();
  }

  set underwritingFee(value: BigDecimal) {
    this.set("underwritingFee", Value.fromBigDecimal(value));
  }

  get issuer(): Bytes {
    let value = this.get("issuer");
    return value!.toBytes();
  }

  set issuer(value: Bytes) {
    this.set("issuer", Value.fromBytes(value));
  }

  get subscription(): BigDecimal {
    let value = this.get("subscription");
    return value!.toBigDecimal();
  }

  set subscription(value: BigDecimal) {
    this.set("subscription", Value.fromBigDecimal(value));
  }
}

export class Snapshots extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("oldTime", Value.fromI32(0));
    this.set("newTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Snapshots entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Snapshots entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Snapshots", id.toString(), this);
    }
  }

  static load(id: string): Snapshots | null {
    return changetype<Snapshots | null>(store.get("Snapshots", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string | null {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set security(value: string | null) {
    if (!value) {
      this.unset("security");
    } else {
      this.set("security", Value.fromString(<string>value));
    }
  }

  get oldTime(): i32 {
    let value = this.get("oldTime");
    return value!.toI32();
  }

  set oldTime(value: i32) {
    this.set("oldTime", Value.fromI32(value));
  }

  get newTime(): i32 {
    let value = this.get("newTime");
    return value!.toI32();
  }

  set newTime(value: i32) {
    this.set("newTime", Value.fromI32(value));
  }
}

export class Resolutions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("recordDate", Value.fromI32(0));
    this.set("resolution", Value.fromString(""));
    this.set("voting", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolutions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Resolutions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Resolutions", id.toString(), this);
    }
  }

  static load(id: string): Resolutions | null {
    return changetype<Resolutions | null>(store.get("Resolutions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get recordDate(): i32 {
    let value = this.get("recordDate");
    return value!.toI32();
  }

  set recordDate(value: i32) {
    this.set("recordDate", Value.fromI32(value));
  }

  get resolution(): string {
    let value = this.get("resolution");
    return value!.toString();
  }

  set resolution(value: string) {
    this.set("resolution", Value.fromString(value));
  }

  get voting(): boolean {
    let value = this.get("voting");
    return value!.toBoolean();
  }

  set voting(value: boolean) {
    this.set("voting", Value.fromBoolean(value));
  }
}

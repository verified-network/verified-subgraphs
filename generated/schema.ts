// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Cash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Cash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Cash entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Cash", id.toString(), this);
    }
  }

  static load(id: string): Cash | null {
    return changetype<Cash | null>(store.get("Cash", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): Bytes | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromBytes(<Bytes>value));
    }
  }

  get cashIssues(): Array<string> | null {
    let value = this.get("cashIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("cashIssues");
    } else {
      this.set("cashIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashDeposits(): Array<string> | null {
    let value = this.get("cashDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashDeposits(value: Array<string> | null) {
    if (!value) {
      this.unset("cashDeposits");
    } else {
      this.set("cashDeposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashRedemptions(): Array<string> | null {
    let value = this.get("cashRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("cashRedemptions");
    } else {
      this.set("cashRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashTransfers(): Array<string> | null {
    let value = this.get("cashTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("cashTransfers");
    } else {
      this.set("cashTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssues(): Array<string> | null {
    let value = this.get("bondIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssues");
    } else {
      this.set("bondIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondPurchases(): Array<string> | null {
    let value = this.get("bondPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondPurchases(value: Array<string> | null) {
    if (!value) {
      this.unset("bondPurchases");
    } else {
      this.set("bondPurchases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondRedemptions(): Array<string> | null {
    let value = this.get("bondRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("bondRedemptions");
    } else {
      this.set("bondRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get BondLiquidations(): Array<string> | null {
    let value = this.get("BondLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set BondLiquidations(value: Array<string> | null) {
    if (!value) {
      this.unset("BondLiquidations");
    } else {
      this.set("BondLiquidations", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("status", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get client(): Bytes | null {
    let value = this.get("client");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set client(value: Bytes | null) {
    if (!value) {
      this.unset("client");
    } else {
      this.set("client", Value.fromBytes(<Bytes>value));
    }
  }

  get name(): Bytes | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set name(value: Bytes | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromBytes(<Bytes>value));
    }
  }

  get accountid(): Bytes | null {
    let value = this.get("accountid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountid(value: Bytes | null) {
    if (!value) {
      this.unset("accountid");
    } else {
      this.set("accountid", Value.fromBytes(<Bytes>value));
    }
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get cashIssues(): Array<string> | null {
    let value = this.get("cashIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("cashIssues");
    } else {
      this.set("cashIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashDeposits(): Array<string> | null {
    let value = this.get("cashDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashDeposits(value: Array<string> | null) {
    if (!value) {
      this.unset("cashDeposits");
    } else {
      this.set("cashDeposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashRedemptions(): Array<string> | null {
    let value = this.get("cashRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("cashRedemptions");
    } else {
      this.set("cashRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cashTransfers(): Array<string> | null {
    let value = this.get("cashTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cashTransfers(value: Array<string> | null) {
    if (!value) {
      this.unset("cashTransfers");
    } else {
      this.set("cashTransfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondIssues(): Array<string> | null {
    let value = this.get("bondIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("bondIssues");
    } else {
      this.set("bondIssues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondPurchases(): Array<string> | null {
    let value = this.get("bondPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondPurchases(value: Array<string> | null) {
    if (!value) {
      this.unset("bondPurchases");
    } else {
      this.set("bondPurchases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bondRedemptions(): Array<string> | null {
    let value = this.get("bondRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondRedemptions(value: Array<string> | null) {
    if (!value) {
      this.unset("bondRedemptions");
    } else {
      this.set("bondRedemptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get BondLiquidations(): Array<string> | null {
    let value = this.get("BondLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set BondLiquidations(value: Array<string> | null) {
    if (!value) {
      this.unset("BondLiquidations");
    } else {
      this.set("BondLiquidations", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offers(): Array<string> | null {
    let value = this.get("offers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offers(value: Array<string> | null) {
    if (!value) {
      this.unset("offers");
    } else {
      this.set("offers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get securitySeller(): Array<string> | null {
    let value = this.get("securitySeller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set securitySeller(value: Array<string> | null) {
    if (!value) {
      this.unset("securitySeller");
    } else {
      this.set("securitySeller", Value.fromStringArray(<Array<string>>value));
    }
  }

  get securityBuyer(): Array<string> | null {
    let value = this.get("securityBuyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set securityBuyer(value: Array<string> | null) {
    if (!value) {
      this.unset("securityBuyer");
    } else {
      this.set("securityBuyer", Value.fromStringArray(<Array<string>>value));
    }
  }

  get primarySubscribers(): Array<string> | null {
    let value = this.get("primarySubscribers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySubscribers(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySubscribers");
    } else {
      this.set(
        "primarySubscribers",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get secondaryIssuers(): Array<string> | null {
    let value = this.get("secondaryIssuers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set secondaryIssuers(value: Array<string> | null) {
    if (!value) {
      this.unset("secondaryIssuers");
    } else {
      this.set("secondaryIssuers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get secondaryInvestors(): Array<string> | null {
    let value = this.get("secondaryInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set secondaryInvestors(value: Array<string> | null) {
    if (!value) {
      this.unset("secondaryInvestors");
    } else {
      this.set(
        "secondaryInvestors",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get tradeTransferor(): Array<string> | null {
    let value = this.get("tradeTransferor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tradeTransferor(value: Array<string> | null) {
    if (!value) {
      this.unset("tradeTransferor");
    } else {
      this.set("tradeTransferor", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tradeTransferee(): Array<string> | null {
    let value = this.get("tradeTransferee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tradeTransferee(value: Array<string> | null) {
    if (!value) {
      this.unset("tradeTransferee");
    } else {
      this.set("tradeTransferee", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquidityProviders(): Array<string> | null {
    let value = this.get("liquidityProviders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityProviders(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityProviders");
    } else {
      this.set(
        "liquidityProviders",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get allotedTo(): Array<string> | null {
    let value = this.get("allotedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set allotedTo(value: Array<string> | null) {
    if (!value) {
      this.unset("allotedTo");
    } else {
      this.set("allotedTo", Value.fromStringArray(<Array<string>>value));
    }
  }

  get refundedTo(): Array<string> | null {
    let value = this.get("refundedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set refundedTo(value: Array<string> | null) {
    if (!value) {
      this.unset("refundedTo");
    } else {
      this.set("refundedTo", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquidityProviderSettled(): Array<string> | null {
    let value = this.get("liquidityProviderSettled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityProviderSettled(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityProviderSettled");
    } else {
      this.set(
        "liquidityProviderSettled",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get issuerSettled(): Array<string> | null {
    let value = this.get("issuerSettled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set issuerSettled(value: Array<string> | null) {
    if (!value) {
      this.unset("issuerSettled");
    } else {
      this.set("issuerSettled", Value.fromStringArray(<Array<string>>value));
    }
  }

  get manager(): Array<string> | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set manager(value: Array<string> | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromStringArray(<Array<string>>value));
    }
  }

  get submanager(): Array<string> | null {
    let value = this.get("submanager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set submanager(value: Array<string> | null) {
    if (!value) {
      this.unset("submanager");
    } else {
      this.set("submanager", Value.fromStringArray(<Array<string>>value));
    }
  }

  get shareholder(): Array<string> | null {
    let value = this.get("shareholder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shareholder(value: Array<string> | null) {
    if (!value) {
      this.unset("shareholder");
    } else {
      this.set("shareholder", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquidityRequestor(): Array<string> | null {
    let value = this.get("liquidityRequestor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityRequestor(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityRequestor");
    } else {
      this.set(
        "liquidityRequestor",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityIssuedTo(): Array<string> | null {
    let value = this.get("liquidityIssuedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityIssuedTo(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityIssuedTo");
    } else {
      this.set(
        "liquidityIssuedTo",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityProvidedTo(): Array<string> | null {
    let value = this.get("liquidityProvidedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityProvidedTo(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityProvidedTo");
    } else {
      this.set(
        "liquidityProvidedTo",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get earnedByManager(): Array<string> | null {
    let value = this.get("earnedByManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set earnedByManager(value: Array<string> | null) {
    if (!value) {
      this.unset("earnedByManager");
    } else {
      this.set("earnedByManager", Value.fromStringArray(<Array<string>>value));
    }
  }

  get earnedByInvestor(): Array<string> | null {
    let value = this.get("earnedByInvestor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set earnedByInvestor(value: Array<string> | null) {
    if (!value) {
      this.unset("earnedByInvestor");
    } else {
      this.set("earnedByInvestor", Value.fromStringArray(<Array<string>>value));
    }
  }

  get issuer(): Array<string> | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set issuer(value: Array<string> | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenName(): Bytes | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenName(value: Bytes | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenType(): Bytes | null {
    let value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenType(value: Bytes | null) {
    if (!value) {
      this.unset("tokenType");
    } else {
      this.set("tokenType", Value.fromBytes(<Bytes>value));
    }
  }

  get bondIssues(): Array<string> {
    let value = this.get("bondIssues");
    return value!.toStringArray();
  }

  set bondIssues(value: Array<string>) {
    this.set("bondIssues", Value.fromStringArray(value));
  }

  get bondPurchases(): Array<string> {
    let value = this.get("bondPurchases");
    return value!.toStringArray();
  }

  set bondPurchases(value: Array<string>) {
    this.set("bondPurchases", Value.fromStringArray(value));
  }

  get bondRedemptions(): Array<string> {
    let value = this.get("bondRedemptions");
    return value!.toStringArray();
  }

  set bondRedemptions(value: Array<string>) {
    this.set("bondRedemptions", Value.fromStringArray(value));
  }

  get bondLiquidations(): Array<string> | null {
    let value = this.get("bondLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bondLiquidations(value: Array<string> | null) {
    if (!value) {
      this.unset("bondLiquidations");
    } else {
      this.set("bondLiquidations", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Platform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Platform entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Platform", id.toString(), this);
    }
  }

  static load(id: string): Platform | null {
    return changetype<Platform | null>(store.get("Platform", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    return value!.toBytes();
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get name(): Bytes {
    let value = this.get("name");
    return value!.toBytes();
  }

  set name(value: Bytes) {
    this.set("name", Value.fromBytes(value));
  }

  get feeCollections(): Array<string> | null {
    let value = this.get("feeCollections");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set feeCollections(value: Array<string> | null) {
    if (!value) {
      this.unset("feeCollections");
    } else {
      this.set("feeCollections", Value.fromStringArray(<Array<string>>value));
    }
  }

  get investorReturns(): Array<string> | null {
    let value = this.get("investorReturns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set investorReturns(value: Array<string> | null) {
    if (!value) {
      this.unset("investorReturns");
    } else {
      this.set("investorReturns", Value.fromStringArray(<Array<string>>value));
    }
  }

  get managerReturns(): Array<string> | null {
    let value = this.get("managerReturns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managerReturns(value: Array<string> | null) {
    if (!value) {
      this.unset("managerReturns");
    } else {
      this.set("managerReturns", Value.fromStringArray(<Array<string>>value));
    }
  }

  get platformReturns(): Array<string> | null {
    let value = this.get("platformReturns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set platformReturns(value: Array<string> | null) {
    if (!value) {
      this.unset("platformReturns");
    } else {
      this.set("platformReturns", Value.fromStringArray(<Array<string>>value));
    }
  }

  get platformLiquidity(): Array<string> | null {
    let value = this.get("platformLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set platformLiquidity(value: Array<string> | null) {
    if (!value) {
      this.unset("platformLiquidity");
    } else {
      this.set(
        "platformLiquidity",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Currency entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get liquidityTokenRequests(): Array<string> | null {
    let value = this.get("liquidityTokenRequests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityTokenRequests(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityTokenRequests");
    } else {
      this.set(
        "liquidityTokenRequests",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityTokenIssues(): Array<string> | null {
    let value = this.get("liquidityTokenIssues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityTokenIssues(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityTokenIssues");
    } else {
      this.set(
        "liquidityTokenIssues",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityOnPlatform(): Array<string> | null {
    let value = this.get("liquidityOnPlatform");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityOnPlatform(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityOnPlatform");
    } else {
      this.set(
        "liquidityOnPlatform",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityEarningsByManager(): Array<string> | null {
    let value = this.get("liquidityEarningsByManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityEarningsByManager(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityEarningsByManager");
    } else {
      this.set(
        "liquidityEarningsByManager",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class Security extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromBytes(Bytes.empty()));
    this.set("productCategory", Value.fromBytes(Bytes.empty()));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("restricted", Value.fromBoolean(false));
    this.set("issueManager", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Security entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Security entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Security", id.toString(), this);
    }
  }

  static load(id: string): Security | null {
    return changetype<Security | null>(store.get("Security", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): Bytes {
    let value = this.get("security");
    return value!.toBytes();
  }

  set security(value: Bytes) {
    this.set("security", Value.fromBytes(value));
  }

  get productCategory(): Bytes {
    let value = this.get("productCategory");
    return value!.toBytes();
  }

  set productCategory(value: Bytes) {
    this.set("productCategory", Value.fromBytes(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get restricted(): boolean {
    let value = this.get("restricted");
    return value!.toBoolean();
  }

  set restricted(value: boolean) {
    this.set("restricted", Value.fromBoolean(value));
  }

  get issueManager(): Bytes {
    let value = this.get("issueManager");
    return value!.toBytes();
  }

  set issueManager(value: Bytes) {
    this.set("issueManager", Value.fromBytes(value));
  }

  get restrictions(): Array<Bytes> | null {
    let value = this.get("restrictions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set restrictions(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("restrictions");
    } else {
      this.set("restrictions", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get primarySubscribers(): Array<string> | null {
    let value = this.get("primarySubscribers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySubscribers(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySubscribers");
    } else {
      this.set(
        "primarySubscribers",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get secondaryInvestors(): Array<string> | null {
    let value = this.get("secondaryInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set secondaryInvestors(value: Array<string> | null) {
    if (!value) {
      this.unset("secondaryInvestors");
    } else {
      this.set(
        "secondaryInvestors",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquidityProviders(): Array<string> | null {
    let value = this.get("liquidityProviders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityProviders(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityProviders");
    } else {
      this.set(
        "liquidityProviders",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get liquidityOffered(): Array<string> | null {
    let value = this.get("liquidityOffered");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidityOffered(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidityOffered");
    } else {
      this.set("liquidityOffered", Value.fromStringArray(<Array<string>>value));
    }
  }

  get subscriptionsClosed(): Array<string> | null {
    let value = this.get("subscriptionsClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set subscriptionsClosed(value: Array<string> | null) {
    if (!value) {
      this.unset("subscriptionsClosed");
    } else {
      this.set(
        "subscriptionsClosed",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get primaryAllotments(): Array<string> | null {
    let value = this.get("primaryAllotments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primaryAllotments(value: Array<string> | null) {
    if (!value) {
      this.unset("primaryAllotments");
    } else {
      this.set(
        "primaryAllotments",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get primaryRefunds(): Array<string> | null {
    let value = this.get("primaryRefunds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primaryRefunds(value: Array<string> | null) {
    if (!value) {
      this.unset("primaryRefunds");
    } else {
      this.set("primaryRefunds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get primarySettlements(): Array<string> | null {
    let value = this.get("primarySettlements");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySettlements(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySettlements");
    } else {
      this.set(
        "primarySettlements",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get resolutions(): Array<string> | null {
    let value = this.get("resolutions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set resolutions(value: Array<string> | null) {
    if (!value) {
      this.unset("resolutions");
    } else {
      this.set("resolutions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get snapshots(): Array<string> | null {
    let value = this.get("snapshots");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set snapshots(value: Array<string> | null) {
    if (!value) {
      this.unset("snapshots");
    } else {
      this.set("snapshots", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CashDeposited extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashDeposited entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashDeposited entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashDeposited", id.toString(), this);
    }
  }

  static load(id: string): CashDeposited | null {
    return changetype<CashDeposited | null>(store.get("CashDeposited", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class CashIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashIssues", id.toString(), this);
    }
  }

  static load(id: string): CashIssues | null {
    return changetype<CashIssues | null>(store.get("CashIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class CashRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("party", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("redeemedFor", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashRedemptions", id.toString(), this);
    }
  }

  static load(id: string): CashRedemptions | null {
    return changetype<CashRedemptions | null>(store.get("CashRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get party(): string {
    let value = this.get("party");
    return value!.toString();
  }

  set party(value: string) {
    this.set("party", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get redeemedFor(): BigDecimal {
    let value = this.get("redeemedFor");
    return value!.toBigDecimal();
  }

  set redeemedFor(value: BigDecimal) {
    this.set("redeemedFor", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class CashTransfers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transferor", Value.fromString(""));
    this.set("transferee", Value.fromString(""));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("deposit", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CashTransfers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CashTransfers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CashTransfers", id.toString(), this);
    }
  }

  static load(id: string): CashTransfers | null {
    return changetype<CashTransfers | null>(store.get("CashTransfers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferor(): string {
    let value = this.get("transferor");
    return value!.toString();
  }

  set transferor(value: string) {
    this.set("transferor", Value.fromString(value));
  }

  get transferee(): string {
    let value = this.get("transferee");
    return value!.toString();
  }

  set transferee(value: string) {
    this.set("transferee", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get deposit(): BigDecimal {
    let value = this.get("deposit");
    return value!.toBigDecimal();
  }

  set deposit(value: BigDecimal) {
    this.set("deposit", Value.fromBigDecimal(value));
  }
}

export class BondIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("issuer", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromBytes(Bytes.empty()));
    this.set("issuedAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collateralCurrency", Value.fromString(""));
    this.set("collateralAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("issueTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondIssues", id.toString(), this);
    }
  }

  static load(id: string): BondIssues | null {
    return changetype<BondIssues | null>(store.get("BondIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuer(): string {
    let value = this.get("issuer");
    return value!.toString();
  }

  set issuer(value: string) {
    this.set("issuer", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    return value!.toBytes();
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get issuedAmount(): BigDecimal {
    let value = this.get("issuedAmount");
    return value!.toBigDecimal();
  }

  set issuedAmount(value: BigDecimal) {
    this.set("issuedAmount", Value.fromBigDecimal(value));
  }

  get collateralCurrency(): string {
    let value = this.get("collateralCurrency");
    return value!.toString();
  }

  set collateralCurrency(value: string) {
    this.set("collateralCurrency", Value.fromString(value));
  }

  get collateralAmount(): BigDecimal {
    let value = this.get("collateralAmount");
    return value!.toBigDecimal();
  }

  set collateralAmount(value: BigDecimal) {
    this.set("collateralAmount", Value.fromBigDecimal(value));
  }

  get issueTime(): i32 {
    let value = this.get("issueTime");
    return value!.toI32();
  }

  set issueTime(value: i32) {
    this.set("issueTime", Value.fromI32(value));
  }
}

export class BondPurchases extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("purchaser", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromBytes(Bytes.empty()));
    this.set("purchaseValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("paidInCurrency", Value.fromString(""));
    this.set("purchasedAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("purchaseTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondPurchases entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondPurchases entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondPurchases", id.toString(), this);
    }
  }

  static load(id: string): BondPurchases | null {
    return changetype<BondPurchases | null>(store.get("BondPurchases", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchaser(): string {
    let value = this.get("purchaser");
    return value!.toString();
  }

  set purchaser(value: string) {
    this.set("purchaser", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    return value!.toBytes();
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get purchaseValue(): BigDecimal {
    let value = this.get("purchaseValue");
    return value!.toBigDecimal();
  }

  set purchaseValue(value: BigDecimal) {
    this.set("purchaseValue", Value.fromBigDecimal(value));
  }

  get paidInCurrency(): string {
    let value = this.get("paidInCurrency");
    return value!.toString();
  }

  set paidInCurrency(value: string) {
    this.set("paidInCurrency", Value.fromString(value));
  }

  get purchasedAmount(): BigDecimal {
    let value = this.get("purchasedAmount");
    return value!.toBigDecimal();
  }

  set purchasedAmount(value: BigDecimal) {
    this.set("purchasedAmount", Value.fromBigDecimal(value));
  }

  get purchaseTime(): i32 {
    let value = this.get("purchaseTime");
    return value!.toI32();
  }

  set purchaseTime(value: i32) {
    this.set("purchaseTime", Value.fromI32(value));
  }
}

export class BondRedemptions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("redeemer", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("bondName", Value.fromBytes(Bytes.empty()));
    this.set("redeemedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("redemptionCurrency", Value.fromString(""));
    this.set("redemptionAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondRedemptions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondRedemptions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondRedemptions", id.toString(), this);
    }
  }

  static load(id: string): BondRedemptions | null {
    return changetype<BondRedemptions | null>(store.get("BondRedemptions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): string {
    let value = this.get("redeemer");
    return value!.toString();
  }

  set redeemer(value: string) {
    this.set("redeemer", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    return value!.toBytes();
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get redeemedValue(): BigDecimal {
    let value = this.get("redeemedValue");
    return value!.toBigDecimal();
  }

  set redeemedValue(value: BigDecimal) {
    this.set("redeemedValue", Value.fromBigDecimal(value));
  }

  get redemptionCurrency(): string {
    let value = this.get("redemptionCurrency");
    return value!.toString();
  }

  set redemptionCurrency(value: string) {
    this.set("redemptionCurrency", Value.fromString(value));
  }

  get redemptionAmount(): BigDecimal {
    let value = this.get("redemptionAmount");
    return value!.toBigDecimal();
  }

  set redemptionAmount(value: BigDecimal) {
    this.set("redemptionAmount", Value.fromBigDecimal(value));
  }
}

export class BondLiquidations extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidator", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("liquidatedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("bondName", Value.fromBytes(Bytes.empty()));
    this.set("liquidationCurrency", Value.fromString(""));
    this.set("liquidatedAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondLiquidations entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BondLiquidations entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BondLiquidations", id.toString(), this);
    }
  }

  static load(id: string): BondLiquidations | null {
    return changetype<BondLiquidations | null>(
      store.get("BondLiquidations", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    return value!.toString();
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get liquidatedValue(): BigDecimal {
    let value = this.get("liquidatedValue");
    return value!.toBigDecimal();
  }

  set liquidatedValue(value: BigDecimal) {
    this.set("liquidatedValue", Value.fromBigDecimal(value));
  }

  get bondName(): Bytes {
    let value = this.get("bondName");
    return value!.toBytes();
  }

  set bondName(value: Bytes) {
    this.set("bondName", Value.fromBytes(value));
  }

  get liquidationCurrency(): string {
    let value = this.get("liquidationCurrency");
    return value!.toString();
  }

  set liquidationCurrency(value: string) {
    this.set("liquidationCurrency", Value.fromString(value));
  }

  get liquidatedAmount(): BigDecimal {
    let value = this.get("liquidatedAmount");
    return value!.toBigDecimal();
  }

  set liquidatedAmount(value: BigDecimal) {
    this.set("liquidatedAmount", Value.fromBigDecimal(value));
  }
}

export class Manager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("role", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Manager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Manager entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Manager", id.toString(), this);
    }
  }

  static load(id: string): Manager | null {
    return changetype<Manager | null>(store.get("Manager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(<string>value));
    }
  }

  get submanager(): string | null {
    let value = this.get("submanager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submanager(value: string | null) {
    if (!value) {
      this.unset("submanager");
    } else {
      this.set("submanager", Value.fromString(<string>value));
    }
  }

  get role(): Bytes {
    let value = this.get("role");
    return value!.toBytes();
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get country(): Bytes | null {
    let value = this.get("country");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set country(value: Bytes | null) {
    if (!value) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBytes(<Bytes>value));
    }
  }

  get managerId(): Bytes | null {
    let value = this.get("managerId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set managerId(value: Bytes | null) {
    if (!value) {
      this.unset("managerId");
    } else {
      this.set("managerId", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Offers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("offered", Value.fromBytes(Bytes.empty()));
    this.set("tomatch", Value.fromString(""));
    this.set("isin", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("desired", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("minimum", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("orderSize", Value.fromBigInt(BigInt.zero()));
    this.set("offeringDocs", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Offers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Offers", id.toString(), this);
    }
  }

  static load(id: string): Offers | null {
    return changetype<Offers | null>(store.get("Offers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offeredBy(): string | null {
    let value = this.get("offeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offeredBy(value: string | null) {
    if (!value) {
      this.unset("offeredBy");
    } else {
      this.set("offeredBy", Value.fromString(<string>value));
    }
  }

  get offered(): Bytes {
    let value = this.get("offered");
    return value!.toBytes();
  }

  set offered(value: Bytes) {
    this.set("offered", Value.fromBytes(value));
  }

  get tomatch(): string {
    let value = this.get("tomatch");
    return value!.toString();
  }

  set tomatch(value: string) {
    this.set("tomatch", Value.fromString(value));
  }

  get isin(): Bytes {
    let value = this.get("isin");
    return value!.toBytes();
  }

  set isin(value: Bytes) {
    this.set("isin", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get desired(): BigDecimal {
    let value = this.get("desired");
    return value!.toBigDecimal();
  }

  set desired(value: BigDecimal) {
    this.set("desired", Value.fromBigDecimal(value));
  }

  get minimum(): BigDecimal {
    let value = this.get("minimum");
    return value!.toBigDecimal();
  }

  set minimum(value: BigDecimal) {
    this.set("minimum", Value.fromBigDecimal(value));
  }

  get orderSize(): BigInt {
    let value = this.get("orderSize");
    return value!.toBigInt();
  }

  set orderSize(value: BigInt) {
    this.set("orderSize", Value.fromBigInt(value));
  }

  get offeringDocs(): string {
    let value = this.get("offeringDocs");
    return value!.toString();
  }

  set offeringDocs(value: string) {
    this.set("offeringDocs", Value.fromString(value));
  }
}

export class Trades extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("unitsToTransfer", Value.fromBigInt(BigInt.zero()));
    this.set("security", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("tradeRef", Value.fromBytes(Bytes.empty()));
    this.set("tradingCommission", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trades entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trades entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trades", id.toString(), this);
    }
  }

  static load(id: string): Trades | null {
    return changetype<Trades | null>(store.get("Trades", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get transferor(): string | null {
    let value = this.get("transferor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferor(value: string | null) {
    if (!value) {
      this.unset("transferor");
    } else {
      this.set("transferor", Value.fromString(<string>value));
    }
  }

  get transferee(): string | null {
    let value = this.get("transferee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferee(value: string | null) {
    if (!value) {
      this.unset("transferee");
    } else {
      this.set("transferee", Value.fromString(<string>value));
    }
  }

  get unitsToTransfer(): BigInt {
    let value = this.get("unitsToTransfer");
    return value!.toBigInt();
  }

  set unitsToTransfer(value: BigInt) {
    this.set("unitsToTransfer", Value.fromBigInt(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get settlementStatus(): Bytes | null {
    let value = this.get("settlementStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set settlementStatus(value: Bytes | null) {
    if (!value) {
      this.unset("settlementStatus");
    } else {
      this.set("settlementStatus", Value.fromBytes(<Bytes>value));
    }
  }

  get amountPaid(): BigDecimal | null {
    let value = this.get("amountPaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountPaid(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountPaid");
    } else {
      this.set("amountPaid", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    return value!.toBytes();
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get tradingCommission(): BigDecimal {
    let value = this.get("tradingCommission");
    return value!.toBigDecimal();
  }

  set tradingCommission(value: BigDecimal) {
    this.set("tradingCommission", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Subscribers extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("pool", Value.fromBytes(Bytes.empty()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("cashSwapped", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("securitySwapped", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
    this.set("bought", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Subscribers entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Subscribers entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Subscribers", id.toString(), this);
    }
  }

  static load(id: string): Subscribers | null {
    return changetype<Subscribers | null>(store.get("Subscribers", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get cashSwapped(): BigDecimal {
    let value = this.get("cashSwapped");
    return value!.toBigDecimal();
  }

  set cashSwapped(value: BigDecimal) {
    this.set("cashSwapped", Value.fromBigDecimal(value));
  }

  get securitySwapped(): BigDecimal {
    let value = this.get("securitySwapped");
    return value!.toBigDecimal();
  }

  set securitySwapped(value: BigDecimal) {
    this.set("securitySwapped", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get bought(): boolean {
    let value = this.get("bought");
    return value!.toBoolean();
  }

  set bought(value: boolean) {
    this.set("bought", Value.fromBoolean(value));
  }
}

export class Investors extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tradeRef", Value.fromBytes(Bytes.empty()));
    this.set("DPID", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Investors entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Investors entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Investors", id.toString(), this);
    }
  }

  static load(id: string): Investors | null {
    return changetype<Investors | null>(store.get("Investors", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    return value!.toBytes();
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tradeRef(): Bytes {
    let value = this.get("tradeRef");
    return value!.toBytes();
  }

  set tradeRef(value: Bytes) {
    this.set("tradeRef", Value.fromBytes(value));
  }

  get DPID(): Bytes {
    let value = this.get("DPID");
    return value!.toBytes();
  }

  set DPID(value: Bytes) {
    this.set("DPID", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Traders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("securityTraded", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("cashTraded", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Traders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Traders entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Traders", id.toString(), this);
    }
  }

  static load(id: string): Traders | null {
    return changetype<Traders | null>(store.get("Traders", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferor(): string | null {
    let value = this.get("transferor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferor(value: string | null) {
    if (!value) {
      this.unset("transferor");
    } else {
      this.set("transferor", Value.fromString(<string>value));
    }
  }

  get transferee(): string | null {
    let value = this.get("transferee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferee(value: string | null) {
    if (!value) {
      this.unset("transferee");
    } else {
      this.set("transferee", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securityTraded(): BigDecimal {
    let value = this.get("securityTraded");
    return value!.toBigDecimal();
  }

  set securityTraded(value: BigDecimal) {
    this.set("securityTraded", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get cashTraded(): BigDecimal {
    let value = this.get("cashTraded");
    return value!.toBigDecimal();
  }

  set cashTraded(value: BigDecimal) {
    this.set("cashTraded", Value.fromBigDecimal(value));
  }
}

export class LiquidityProviders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("tokenOffered", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityProviders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityProviders entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityProviders", id.toString(), this);
    }
  }

  static load(id: string): LiquidityProviders | null {
    return changetype<LiquidityProviders | null>(
      store.get("LiquidityProviders", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): Bytes {
    let value = this.get("platform");
    return value!.toBytes();
  }

  set platform(value: Bytes) {
    this.set("platform", Value.fromBytes(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get tokenOffered(): BigDecimal {
    let value = this.get("tokenOffered");
    return value!.toBigDecimal();
  }

  set tokenOffered(value: BigDecimal) {
    this.set("tokenOffered", Value.fromBigDecimal(value));
  }

  get underwritten(): BigDecimal | null {
    let value = this.get("underwritten");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set underwritten(value: BigDecimal | null) {
    if (!value) {
      this.unset("underwritten");
    } else {
      this.set("underwritten", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get earned(): BigDecimal | null {
    let value = this.get("earned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set earned(value: BigDecimal | null) {
    if (!value) {
      this.unset("earned");
    } else {
      this.set("earned", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Closures extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Closures entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Closures entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Closures", id.toString(), this);
    }
  }

  static load(id: string): Closures | null {
    return changetype<Closures | null>(store.get("Closures", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Allotments extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("securitySubscribed", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("allotedAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Allotments entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Allotments entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Allotments", id.toString(), this);
    }
  }

  static load(id: string): Allotments | null {
    return changetype<Allotments | null>(store.get("Allotments", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    return value!.toBigDecimal();
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get allotedAmount(): BigDecimal {
    let value = this.get("allotedAmount");
    return value!.toBigDecimal();
  }

  set allotedAmount(value: BigDecimal) {
    this.set("allotedAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Refunds extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("securitySubscribed", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("refundAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Refunds entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Refunds entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Refunds", id.toString(), this);
    }
  }

  static load(id: string): Refunds | null {
    return changetype<Refunds | null>(store.get("Refunds", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get investor(): string | null {
    let value = this.get("investor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set investor(value: string | null) {
    if (!value) {
      this.unset("investor");
    } else {
      this.set("investor", Value.fromString(<string>value));
    }
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get securitySubscribed(): BigDecimal {
    let value = this.get("securitySubscribed");
    return value!.toBigDecimal();
  }

  set securitySubscribed(value: BigDecimal) {
    this.set("securitySubscribed", Value.fromBigDecimal(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get refundAmount(): BigDecimal {
    let value = this.get("refundAmount");
    return value!.toBigDecimal();
  }

  set refundAmount(value: BigDecimal) {
    this.set("refundAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Settlements extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolid", Value.fromBytes(Bytes.empty()));
    this.set("security", Value.fromString(""));
    this.set("currency", Value.fromBytes(Bytes.empty()));
    this.set("underwritingFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("subscription", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Settlements entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Settlements entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Settlements", id.toString(), this);
    }
  }

  static load(id: string): Settlements | null {
    return changetype<Settlements | null>(store.get("Settlements", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolid(): Bytes {
    let value = this.get("poolid");
    return value!.toBytes();
  }

  set poolid(value: Bytes) {
    this.set("poolid", Value.fromBytes(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get liquidityProvider(): string | null {
    let value = this.get("liquidityProvider");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityProvider(value: string | null) {
    if (!value) {
      this.unset("liquidityProvider");
    } else {
      this.set("liquidityProvider", Value.fromString(<string>value));
    }
  }

  get underwritingFee(): BigDecimal {
    let value = this.get("underwritingFee");
    return value!.toBigDecimal();
  }

  set underwritingFee(value: BigDecimal) {
    this.set("underwritingFee", Value.fromBigDecimal(value));
  }

  get issuer(): string | null {
    let value = this.get("issuer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuer(value: string | null) {
    if (!value) {
      this.unset("issuer");
    } else {
      this.set("issuer", Value.fromString(<string>value));
    }
  }

  get subscription(): BigDecimal {
    let value = this.get("subscription");
    return value!.toBigDecimal();
  }

  set subscription(value: BigDecimal) {
    this.set("subscription", Value.fromBigDecimal(value));
  }
}

export class Snapshots extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("oldTime", Value.fromI32(0));
    this.set("newTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Snapshots entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Snapshots entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Snapshots", id.toString(), this);
    }
  }

  static load(id: string): Snapshots | null {
    return changetype<Snapshots | null>(store.get("Snapshots", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get oldTime(): i32 {
    let value = this.get("oldTime");
    return value!.toI32();
  }

  set oldTime(value: i32) {
    this.set("oldTime", Value.fromI32(value));
  }

  get newTime(): i32 {
    let value = this.get("newTime");
    return value!.toI32();
  }

  set newTime(value: i32) {
    this.set("newTime", Value.fromI32(value));
  }
}

export class Resolutions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("security", Value.fromString(""));
    this.set("recordDate", Value.fromI32(0));
    this.set("resolution", Value.fromString(""));
    this.set("voting", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolutions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Resolutions entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Resolutions", id.toString(), this);
    }
  }

  static load(id: string): Resolutions | null {
    return changetype<Resolutions | null>(store.get("Resolutions", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get security(): string {
    let value = this.get("security");
    return value!.toString();
  }

  set security(value: string) {
    this.set("security", Value.fromString(value));
  }

  get recordDate(): i32 {
    let value = this.get("recordDate");
    return value!.toI32();
  }

  set recordDate(value: i32) {
    this.set("recordDate", Value.fromI32(value));
  }

  get resolution(): string {
    let value = this.get("resolution");
    return value!.toString();
  }

  set resolution(value: string) {
    this.set("resolution", Value.fromString(value));
  }

  get voting(): boolean {
    let value = this.get("voting");
    return value!.toBoolean();
  }

  set voting(value: boolean) {
    this.set("voting", Value.fromBoolean(value));
  }
}

export class RevenueShares extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("shareholder", Value.fromString(""));
    this.set("shareholderType", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RevenueShares entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RevenueShares entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RevenueShares", id.toString(), this);
    }
  }

  static load(id: string): RevenueShares | null {
    return changetype<RevenueShares | null>(store.get("RevenueShares", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shareholder(): string {
    let value = this.get("shareholder");
    return value!.toString();
  }

  set shareholder(value: string) {
    this.set("shareholder", Value.fromString(value));
  }

  get shareholderType(): Bytes {
    let value = this.get("shareholderType");
    return value!.toBytes();
  }

  set shareholderType(value: Bytes) {
    this.set("shareholderType", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidityTokenRequests extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("investor", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidityTokenRequests entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityTokenRequests entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityTokenRequests", id.toString(), this);
    }
  }

  static load(id: string): LiquidityTokenRequests | null {
    return changetype<LiquidityTokenRequests | null>(
      store.get("LiquidityTokenRequests", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    return value!.toString();
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value!.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }
}

export class LiquidityTokenIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("investor", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("LPToIssue", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityTokenIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityTokenIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityTokenIssues", id.toString(), this);
    }
  }

  static load(id: string): LiquidityTokenIssues | null {
    return changetype<LiquidityTokenIssues | null>(
      store.get("LiquidityTokenIssues", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    return value!.toString();
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value!.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }

  get LPToIssue(): BigDecimal {
    let value = this.get("LPToIssue");
    return value!.toBigDecimal();
  }

  set LPToIssue(value: BigDecimal) {
    this.set("LPToIssue", Value.fromBigDecimal(value));
  }
}

export class LiquidityOnPlatform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("manager", Value.fromString(""));
    this.set("LPToken", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("token", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityOnPlatform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityOnPlatform entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityOnPlatform", id.toString(), this);
    }
  }

  static load(id: string): LiquidityOnPlatform | null {
    return changetype<LiquidityOnPlatform | null>(
      store.get("LiquidityOnPlatform", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get LPToken(): BigDecimal {
    let value = this.get("LPToken");
    return value!.toBigDecimal();
  }

  set LPToken(value: BigDecimal) {
    this.set("LPToken", Value.fromBigDecimal(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get("tokenAmount");
    return value!.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set("tokenAmount", Value.fromBigDecimal(value));
  }
}

export class ManagerRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("manager", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("distribution", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagerRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ManagerRoI entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ManagerRoI", id.toString(), this);
    }
  }

  static load(id: string): ManagerRoI | null {
    return changetype<ManagerRoI | null>(store.get("ManagerRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get distribution(): BigDecimal {
    let value = this.get("distribution");
    return value!.toBigDecimal();
  }

  set distribution(value: BigDecimal) {
    this.set("distribution", Value.fromBigDecimal(value));
  }
}

export class PlatformRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("vitta", Value.fromBytes(Bytes.empty()));
    this.set("distribution", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlatformRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PlatformRoI entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PlatformRoI", id.toString(), this);
    }
  }

  static load(id: string): PlatformRoI | null {
    return changetype<PlatformRoI | null>(store.get("PlatformRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get vitta(): Bytes {
    let value = this.get("vitta");
    return value!.toBytes();
  }

  set vitta(value: Bytes) {
    this.set("vitta", Value.fromBytes(value));
  }

  get distribution(): BigDecimal {
    let value = this.get("distribution");
    return value!.toBigDecimal();
  }

  set distribution(value: BigDecimal) {
    this.set("distribution", Value.fromBigDecimal(value));
  }
}

export class InvestorRoI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("investor", Value.fromString(""));
    this.set("vitta", Value.fromBytes(Bytes.empty()));
    this.set("prorataStake", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestorRoI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InvestorRoI entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InvestorRoI", id.toString(), this);
    }
  }

  static load(id: string): InvestorRoI | null {
    return changetype<InvestorRoI | null>(store.get("InvestorRoI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get investor(): string {
    let value = this.get("investor");
    return value!.toString();
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get vitta(): Bytes {
    let value = this.get("vitta");
    return value!.toBytes();
  }

  set vitta(value: Bytes) {
    this.set("vitta", Value.fromBytes(value));
  }

  get prorataStake(): BigDecimal {
    let value = this.get("prorataStake");
    return value!.toBigDecimal();
  }

  set prorataStake(value: BigDecimal) {
    this.set("prorataStake", Value.fromBigDecimal(value));
  }
}

export class FeeCollections extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeCollections entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FeeCollections entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FeeCollections", id.toString(), this);
    }
  }

  static load(id: string): FeeCollections | null {
    return changetype<FeeCollections | null>(store.get("FeeCollections", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get feeCollected(): BigDecimal | null {
    let value = this.get("feeCollected");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeCollected(value: BigDecimal | null) {
    if (!value) {
      this.unset("feeCollected");
    } else {
      this.set("feeCollected", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ManagersOnPlatform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("platform", Value.fromString(""));
    this.set("manager", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagersOnPlatform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ManagersOnPlatform entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ManagersOnPlatform", id.toString(), this);
    }
  }

  static load(id: string): ManagersOnPlatform | null {
    return changetype<ManagersOnPlatform | null>(
      store.get("ManagersOnPlatform", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BondIssued extends ethereum.Event {
  get params(): BondIssued__Params {
    return new BondIssued__Params(this);
  }
}

export class BondIssued__Params {
  _event: BondIssued;

  constructor(event: BondIssued) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bondName(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currency(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get issueTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BondRedeemed extends ethereum.Event {
  get params(): BondRedeemed__Params {
    return new BondRedeemed__Params(this);
  }
}

export class BondRedeemed__Params {
  _event: BondRedeemed;

  constructor(event: BondRedeemed) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenName(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get currency(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class BondPurchased extends ethereum.Event {
  get params(): BondPurchased__Params {
    return new BondPurchased__Params(this);
  }
}

export class BondPurchased__Params {
  _event: BondPurchased;

  constructor(event: BondPurchased) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bondName(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currency(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get paidInAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get purchaseTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BondLiquidated extends ethereum.Event {
  get params(): BondLiquidated__Params {
    return new BondLiquidated__Params(this);
  }
}

export class BondLiquidated__Params {
  _event: BondLiquidated;

  constructor(event: BondLiquidated) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenName(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get currency(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Bond__issuesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Bond__purchasesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Bond__getBondIssuesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Bytes,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Bond__getBondPurchasesResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Bond extends ethereum.SmartContract {
  static bind(address: Address): Bond {
    return new Bond("Bond", address);
  }

  bondCurrency(): Bytes {
    let result = super.call("bondCurrency", "bondCurrency():(bytes32)", []);

    return result[0].toBytes();
  }

  try_bondCurrency(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("bondCurrency", "bondCurrency():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issues(param0: Address, param1: Address): Bond__issuesResult {
    let result = super.call(
      "issues",
      "issues(address,address):(uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Bond__issuesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_issues(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Bond__issuesResult> {
    let result = super.tryCall(
      "issues",
      "issues(address,address):(uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bond__issuesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  purchases(param0: Address, param1: Address): Bond__purchasesResult {
    let result = super.call(
      "purchases",
      "purchases(address,address):(uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Bond__purchasesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_purchases(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Bond__purchasesResult> {
    let result = super.tryCall(
      "purchases",
      "purchases(address,address):(uint256,uint256,bytes32,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bond__purchasesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bondName(): Bytes {
    let result = super.call("bondName", "bondName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_bondName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("bondName", "bondName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bondsIssued(param0: BigInt): Address {
    let result = super.call("bondsIssued", "bondsIssued(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_bondsIssued(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bondsIssued",
      "bondsIssued(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestIssue(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    cashContract: Address
  ): boolean {
    let result = super.call(
      "requestIssue",
      "requestIssue(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(cashContract)
      ]
    );

    return result[0].toBoolean();
  }

  try_requestIssue(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    cashContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestIssue",
      "requestIssue(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(cashContract)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestPurchase(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    cashContract: Address
  ): boolean {
    let result = super.call(
      "requestPurchase",
      "requestPurchase(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(cashContract)
      ]
    );

    return result[0].toBoolean();
  }

  try_requestPurchase(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    cashContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestPurchase",
      "requestPurchase(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(cashContract)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestRedemption(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    tokenContract: Address
  ): boolean {
    let result = super.call(
      "requestRedemption",
      "requestRedemption(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(tokenContract)
      ]
    );

    return result[0].toBoolean();
  }

  try_requestRedemption(
    amount: BigInt,
    payer: Address,
    currency: Bytes,
    tokenContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestRedemption",
      "requestRedemption(uint256,address,bytes32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromFixedBytes(currency),
        ethereum.Value.fromAddress(tokenContract)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferForward(
    sender: Address,
    receiver: Address,
    tokens: BigInt,
    forwarder: Address
  ): boolean {
    let result = super.call(
      "transferForward",
      "transferForward(address,address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(tokens),
        ethereum.Value.fromAddress(forwarder)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferForward(
    sender: Address,
    receiver: Address,
    tokens: BigInt,
    forwarder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferForward",
      "transferForward(address,address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(tokens),
        ethereum.Value.fromAddress(forwarder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBonds(): Array<Address> {
    let result = super.call("getBonds", "getBonds():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getBonds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getBonds", "getBonds():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBondIssues(
    issuer: Address,
    bondToken: Address
  ): Bond__getBondIssuesResult {
    let result = super.call(
      "getBondIssues",
      "getBondIssues(address,address):(uint256,uint256,uint256,bytes32,uint256)",
      [
        ethereum.Value.fromAddress(issuer),
        ethereum.Value.fromAddress(bondToken)
      ]
    );

    return new Bond__getBondIssuesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBigInt()
    );
  }

  try_getBondIssues(
    issuer: Address,
    bondToken: Address
  ): ethereum.CallResult<Bond__getBondIssuesResult> {
    let result = super.tryCall(
      "getBondIssues",
      "getBondIssues(address,address):(uint256,uint256,uint256,bytes32,uint256)",
      [
        ethereum.Value.fromAddress(issuer),
        ethereum.Value.fromAddress(bondToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bond__getBondIssuesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBigInt()
      )
    );
  }

  getBondPurchases(
    purchaser: Address,
    bondToken: Address
  ): Bond__getBondPurchasesResult {
    let result = super.call(
      "getBondPurchases",
      "getBondPurchases(address,address):(uint256,uint256,bytes32,uint256)",
      [
        ethereum.Value.fromAddress(purchaser),
        ethereum.Value.fromAddress(bondToken)
      ]
    );

    return new Bond__getBondPurchasesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt()
    );
  }

  try_getBondPurchases(
    purchaser: Address,
    bondToken: Address
  ): ethereum.CallResult<Bond__getBondPurchasesResult> {
    let result = super.tryCall(
      "getBondPurchases",
      "getBondPurchases(address,address):(uint256,uint256,bytes32,uint256)",
      [
        ethereum.Value.fromAddress(purchaser),
        ethereum.Value.fromAddress(bondToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bond__getBondPurchasesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt()
      )
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _currency(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _fee(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RequestIssueCall extends ethereum.Call {
  get inputs(): RequestIssueCall__Inputs {
    return new RequestIssueCall__Inputs(this);
  }

  get outputs(): RequestIssueCall__Outputs {
    return new RequestIssueCall__Outputs(this);
  }
}

export class RequestIssueCall__Inputs {
  _call: RequestIssueCall;

  constructor(call: RequestIssueCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currency(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get cashContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RequestIssueCall__Outputs {
  _call: RequestIssueCall;

  constructor(call: RequestIssueCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RequestPurchaseCall extends ethereum.Call {
  get inputs(): RequestPurchaseCall__Inputs {
    return new RequestPurchaseCall__Inputs(this);
  }

  get outputs(): RequestPurchaseCall__Outputs {
    return new RequestPurchaseCall__Outputs(this);
  }
}

export class RequestPurchaseCall__Inputs {
  _call: RequestPurchaseCall;

  constructor(call: RequestPurchaseCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currency(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get cashContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RequestPurchaseCall__Outputs {
  _call: RequestPurchaseCall;

  constructor(call: RequestPurchaseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RequestRedemptionCall extends ethereum.Call {
  get inputs(): RequestRedemptionCall__Inputs {
    return new RequestRedemptionCall__Inputs(this);
  }

  get outputs(): RequestRedemptionCall__Outputs {
    return new RequestRedemptionCall__Outputs(this);
  }
}

export class RequestRedemptionCall__Inputs {
  _call: RequestRedemptionCall;

  constructor(call: RequestRedemptionCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currency(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokenContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RequestRedemptionCall__Outputs {
  _call: RequestRedemptionCall;

  constructor(call: RequestRedemptionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferForwardCall extends ethereum.Call {
  get inputs(): TransferForwardCall__Inputs {
    return new TransferForwardCall__Inputs(this);
  }

  get outputs(): TransferForwardCall__Outputs {
    return new TransferForwardCall__Outputs(this);
  }
}

export class TransferForwardCall__Inputs {
  _call: TransferForwardCall;

  constructor(call: TransferForwardCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get forwarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class TransferForwardCall__Outputs {
  _call: TransferForwardCall;

  constructor(call: TransferForwardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
